# ===== Snakefile for trimming reads with bbduk =====================

def _get_barcodes(wildcards):
    import os.path
    import re
    sample = wildcards.sample
    patternfile = BARCODES
    filename =  PROJ + "/clumpify/" + sample + "_R1_clumpify.fastq.gz"
    
    if os.path.exists(patternfile):
      with gzip.open(filename,'rt') as f:
        header = f.readline().strip().split()
        header2 = header[1].split(":")
        my_indexs = header2[-1].split("+")
      
      index_patterns = {}
      for line in open(patternfile):
        index, pattern = line.strip().split("=")
        index_patterns[index] = pattern
        
      results = []
      for t in my_indexs:
        for p in index_patterns:
          match = re.search(p, t)
          if match:
            results.append(index_patterns[p])
            break  # Exit the loop if a match is found
    else:
      results=BARCODES.strip().split()
    return ','.join(results)
    
    
# Run bbduk
rule bbduk_paired:
    input:
        R1  = PROJ + "/clumpify/{sample}_R1_clumpify.fastq.gz",
        R2  = PROJ + "/clumpify/{sample}_R2_clumpify.fastq.gz"
    output:
        R1  = temp(PROJ + "/bbduk/{sample}_R1_bbduk.fastq.gz"),
        R2  = temp(PROJ + "/bbduk/{sample}_R2_bbduk.fastq.gz"),
        log =      PROJ + "/bbduk/{sample}_bbduk.log",
        log2 = PROJ + "/bbduk/{sample}_bbduk_KTrimmed.log"
    params:
        job_name = "{sample}_bbduk",
        memory   = 110,
        args     = CMD_PARAMS["bbduk"],
        bar      = _get_barcodes
    log:
        out = PROJ + "/logs/{sample}_bbduk.out",
        err = PROJ + "/logs/{sample}_bbduk.err"
    message:
        "Removing duplicats for {wildcards.sample}" 
    threads:
        12
    run:
        # If no params are passed, make a symlink to original fastq
        if len(params.args) == 0:
            os.symlink(input[0], output[0])
        else:
            shell(
                """
                bbduk.sh -Xmx100g threads=12 \
                    in1={input.R1} in2={input.R2} \
                    out1={output.R1} out2={output.R2} \
                    stats={output.log2} \
                    literal={params.bar} {params.args} 2>> {output.log}
                """
            )

# make more stats files
rule mod_bbduk_stats:
    input:
        PROJ + "/bbduk/{sample}_bbduk_KTrimmed.log",
        PROJ + "/bbduk/{sample}_bbduk.log",
        PROJ + "/clumpify/{sample}_clumpify.log"
    output:
        PROJ + "/bbduk/{sample}_bbduk_reads_removed.log",
        PROJ + "/clumpify/{sample}_clumpify_deDup.log"
    params:
        job_name = "{sample}_bbduk_stats",
        memory   = 4
    log:
        out = PROJ + "/logs/{sample}_bbduk_stats.out",
        err = PROJ + "/logs/{sample}_bbduk_stats.err"
    message:
        "getting bbduk_stats for {wildcards.sample}"
    threads: 
        1
    script:
        '/beevol/home/erickson/src/pipelines/R_scripts/bbtools_stats.R'
        
  
# Create bbduk summary
rule bbduk_summary:
    input:
        expand(
            PROJ + "/bbduk/{sample}_bbduk.log",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_bbduk.tsv"
    params:
        job_name = PROJ + "_bbduk_summary",
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_bbduk_summary.out",
        err = PROJ + "/logs/" + PROJ + "_bbduk_summary.err"
    message:
        "Creating " + PROJ + " bbduk summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                name = os.path.basename(file)
                name = re.sub("_bbduk.log", "", name)

                for line in open(file, "r"):
                    match = re.search("Total Removed:", line)

                    if match:
                        mett = line.strip().split("\t")
                        num = mett[1].strip()
                        num = re.sub(" reads ", "", num)
                        met = re.search("[\w\(\) ]+:", line).group(0)
                        met = re.sub(":", "", met)
                        met = met.strip()
                        met = re.sub(" ", "_", met)
                        

                        out.write("%s\t%s\t%s\n" % (name, met, num))


