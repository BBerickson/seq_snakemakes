# ===== Snake file for processing mNET-seq data ================================

from pytools.persistent_dict import PersistentDict
import os
import glob
import re
import subprocess
import gzip
import random

# Parameters from config.yaml
PROJ            = config["PROJ"]
RAW_DATA        = config["RAW_DATA"]
SAMPLES         = config["SAMPLES"]
SEQ_DATE        = config["SEQ_DATE"]
BARCODES        = config["BARCODES"]
INDEX_PATH      = config["INDEX_PATH"]
INDEX_SAMPLE    = config["INDEX_SAMPLE"]
CMD_PARAMS      = config["CMD_PARAMS"]
SFX             = config["SFX"]
COLORS          = config["COLORS"]
USER            = config["USER"]
MEMORY          = config["MEMORY"]
SINGULARITY     = config["SINGULARITY"]

if SINGULARITY != "" or SINGULARITY is not None:
  container: SINGULARITY 

# Directories for data and scripts
FASTQ_DIR = PROJ + "/fastqs"

# Sample and group lists
SAMS = [[y, x] for y in SAMPLES for x in SAMPLES[y]]
GRPS = [x[0] for x in SAMS]
SAMS = [x[1] for x in SAMS]

GRPS_UNIQ = list(dict.fromkeys(GRPS))
SAMS_UNIQ = list(dict.fromkeys(SAMS))
SAMS_UNIQ2 = list(dict.fromkeys(SAMS[::2]))

# Print summary of samples and groups
print("SAMS (%s): %s\n" % (len(SAMS), SAMS))
print("GRPS (%s): %s\n" % (len(GRPS), GRPS))
print("SAMS_UNIQ (%s): %s\n" % (len(SAMS_UNIQ), SAMS_UNIQ))
print("GRPS_UNIQ (%s): %s\n" % (len(GRPS_UNIQ), GRPS_UNIQ))

# Wildcard constraints
GRP_REGEX = "[a-zA-Z0-9_\-]+"

wildcard_constraints:
    sample  = "[a-zA-Z0-9_\-]+",
    group   = GRP_REGEX,
    sam_grp = "[a-zA-Z0-9_\-]+-[a-zA-Z0-9_\-]+"


# Create symlinks for fastqs
if not os.path.exists(FASTQ_DIR):
    os.makedirs(FASTQ_DIR)

def _get_sfx(sfx):
    if sfx == ".fastq.gz":
        outsfx = ["_" + x + "_001" + sfx for x in ["R1", "R2"]]
    elif sfx == ".fq.gz":
        outsfx = ["_" + x + sfx for x in ["1", "2"]]
    else:
        outsfx = sfx
    return outsfx

FQ_SFX = _get_sfx(SFX)

def _get_fqs(sample, suffix):
    fq_pat   = sample + "*" + suffix
    fq_paths = []

    # Retrieve paths for fastq files that start with sample name
    for dir in RAW_DATA:
        paths = os.path.join(dir, fq_pat)
        paths = glob.glob(os.path.abspath(paths))

        for path in paths:
            fq_paths.append(path)

    # Check for duplicate paths
    if not fq_paths:
        sys.exit("ERROR: no fastqs found for " + fq_pat + ".")

    if len(fq_paths) > 1:
        sys.exit("ERROR: Multiple fastqs found for " + fq_pat + ".") 

    fq_paths = fq_paths[0]
    fastq    = os.path.basename(fq_paths)

    # Create symlinks
    # Using subprocess since os.symlink requires a target file instead of target directory
    if not os.path.exists(FASTQ_DIR + "/" + fastq):
        cmd = "ln -s " + fq_paths + " " + FASTQ_DIR

        if cmd != "":
            subprocess.run(cmd, shell = True)
    
    # Return fastq file name
    return(re.sub(SFX + "$", "", fastq))

FASTQS = [_get_fqs(x, y) for x in SAMS_UNIQ for y in FQ_SFX]

def _get_colors(sample_key, color):
    if len(sample_key) >= len(color):
      color.extend(["0,0,0"]*len(set(sample_key)))
    res = {}
    for key in sample_key:
      for value in color:
        res[key] = value
        color.remove(value)
        break  
    return(res)

COLS_DICT = _get_colors(SAMS_UNIQ, COLORS)

def _get_normtype(normUsing, scaleFactor):
    match = re.search(r"--Offset\s+(-?\d+)", normUsing)
    if match:
      num = int(match.group(1))
      if num == -1:
        word = "_3end"
      elif num == 1:
        word = "_5end"
      else:
        word = "_offset_{offset_value}"
    else:
      word = ""
    message = "norm" + word + "_" + scaleFactor
    return message

NORMS = _get_normtype(CMD_PARAMS["bamCoverage"],"subsample")


# Final output files
rule all:
    input:
        # FastQC
        PROJ + "/stats/" + PROJ + "_fastqc.tsv",
        
        # clumpify
        PROJ + "/stats/" + PROJ + "_clumpify.tsv",
        
        # bbduk
        PROJ + "/stats/" + PROJ + "_bbduk.tsv",

        # Bowtie2
        PROJ + "/stats/" + PROJ + "_aligned.tsv",
        
        # subsample of all reads, and URL's
        PROJ + "/stats/" + PROJ + "_" + INDEX_SAMPLE + "_subsample.tsv",
        #PROJ + "/URLS/" + PROJ + "_" + INDEX_SAMPLE + "_dedup_subsample_whole_bam_URL.txt",
        
        # results
        PROJ + "/stats/" + PROJ + "_results.tsv",
        
        # stranded BW from subsampled bams with UCSC URL's
        PROJ + "/URLS/" + PROJ + "_" + INDEX_SAMPLE + "_" + NORMS + "_bw_URL.txt"
        


# Run FastQC
include: "rules/01_fastqc.snake"

# Run clumpify
include: "rules/01_clumpify.snake"

# Run bbduk
include: "rules/02_bbduk.snake"

# Align reads with bowtie2
include: "rules/03_bowtie.snake"

# Run dedup subsample all reads
include: "rules/04_dedup_subsample.snake"

# summery of all results
include: "rules/05_results.snake"

# Run deeptools bamCoverage
include: "rules/05_bamCoverage_stranded.snake"

