# ===== Snake file for processing mNET-seq data ================================

from pytools.persistent_dict import PersistentDict
import os
import glob
import re
import subprocess
import gzip
import random

# Parameters from config.yaml
PROJ            = config["PROJ"]
RAW_DATA        = config["RAW_DATA"]
SAMPLES         = config["SAMPLES"]
SEQ_DATE        = config["SEQ_DATE"]
INDEX_PATH      = config["INDEX_PATH"]
INDEX_SAMPLE    = config["INDEX_SAMPLE"]
CHROMS          = config["CHROMS"]
GTF             = config["GTF"]
GENES           = config["GENES"]
GENES2          = config["GENES2"]
MASK            = config["MASK"]
MASK2           = config["MASK2"]
MASK2           = ",".join(MASK2)
TEST_GENES      = config["TEST_GENES"]
CMD_PARAMS      = config["CMD_PARAMS"]
SFX             = config["SFX"]
COLORS          = config["COLORS"]
USER            = config["USER"]
MEMORY          = config["MEMORY"]
SINGULARITY     = config["SINGULARITY"]
WIN_SIZE        = config["WIN_SIZE"]
STRENGTH_GROUPS = config["STRENGTH_GROUPS"]
PAUSE_ROUND     = config["PAUSE_ROUND"]
GENELIST        = config["GENELIST"]

# Files for metaplots
# need gene subsampling parameters so these results are included in pipeline
META_BEDS = config["META_BEDS"]

if SINGULARITY != "" or SINGULARITY is not None:
  container: SINGULARITY 

# Directory with required scripts
SRC = "src"

# Files for metaplots

GENE_SUB_BEDS = config["GENE_SUBSAMPLE_BEDS"]
GENE_SUB_REGS = list(GENE_SUB_BEDS.keys())

if GENE_SUB_REGS & META_BEDS.keys():
    sys.exit("ERROR: META_BEDS and GENE_SUBSAMPLE_BEDS must have different labels. Files provided by GENE_SUBSAMPLE_BEDS will get added to META_BEDS.")

META_BEDS.update(dict(GENE_SUB_BEDS))

REGIONS = list(META_BEDS.keys())


# Pausing strength parameters
def _create_dict(keys, values):
    if (len(keys) != len(values)) & (len(values) != 1):
        sys.exit("ERROR: For pause strength parameters must provide a single value or a value for each group.")

    if len(values) == 1:
        values = [values] * len(keys)

    d = dict(zip(keys, values))

    return(d)
    
PAUSE_ROUND = _create_dict(STRENGTH_GROUPS, PAUSE_ROUND)

# Add label for unfiltered pauses ("_")
ALL_GROUPS = STRENGTH_GROUPS.copy()
ALL_GROUPS.append("_")

# Sample and group lists
SAMS = [[y, x] for y in SAMPLES for x in SAMPLES[y]]
GRPS = [x[0] for x in SAMS]
SAMS = [x[1] for x in SAMS]

GRPS_UNIQ = list(dict.fromkeys(GRPS))
SAMS_UNIQ = list(dict.fromkeys(SAMS))
SAMS_UNIQ2 = list(dict.fromkeys(SAMS[::2]))

# Gene subsampling groups
SAM_GRPS      = [x + "_" + y for y in SAMPLES for x in SAMPLES[y]]
GENE_SUB_GRPS = [x + "_" + y for x in SAM_GRPS for y in GENE_SUB_REGS]


# Print summary of samples and groups
print("SAMS (%s): %s\n" % (len(SAMS), SAMS))
print("GRPS (%s): %s\n" % (len(GRPS), GRPS))
print("SAMS_UNIQ (%s): %s\n" % (len(SAMS_UNIQ), SAMS_UNIQ))
print("GRPS_UNIQ (%s): %s\n" % (len(GRPS_UNIQ), GRPS_UNIQ))
print("SAM_GRPS (%s): %s\n" % (len(SAM_GRPS), SAM_GRPS))
print("GENE_SUB_GRPS (%s): %s\n" % (len(GENE_SUB_GRPS), GENE_SUB_GRPS))

# Wildcard constraints
GRP_REGEX = "[a-zA-Z0-9_\-]+"
# for stren exclude "_sep_" but allow "_"
wildcard_constraints:
    sample  = "[a-zA-Z0-9_\-]+",
    group   = GRP_REGEX,
    sam_grp = "[a-zA-Z0-9_\-]+-[a-zA-Z0-9_\-]+",
    region = "[a-zA-Z0-9\-]+",
    reads  = "[a-zA-Z]+",
    win    = "[0-9]+",
    stren  = "(_(?!sep).*_)",
    grp    = "(_(?!sep).*_|_)"

def _get_colors(sample_key, group_counts, sample_key2, color):
    if len(sample_key) > len(group_counts):
      sample_key = sample_key2
    if len(sample_key) >= len(color):
      color.extend(["0,0,0"]*len(set(sample_key)))
    res = {}
    for key in sample_key:
      for value in color:
        res[key] = value
        color.remove(value)
        break  
    return(res)

COLS_DICT = _get_colors(SAMS_UNIQ, GRPS_UNIQ,  SAMS_UNIQ2, COLORS)

# Final output files
rule all:
    input:
        # Gene subsampling 
        expand(
            PROJ + "/beds/{sample}_{group}_{sub_region}.bed.gz",
            sample = SAMS_UNIQ, group = GRPS_UNIQ, sub_region = GENE_SUB_REGS
        ),

        # FeatureCounts
        PROJ + "/stats/" + PROJ + "_featureCounts.tsv",
        
        # Filtering summary
        PROJ + "/stats/" + PROJ + "_filt.tsv",
        
        # bedgraphs + Gene subsampling test
        expand(
            PROJ + "/stats/{group}_{sub_region}_test.tsv",
            group = GRPS_UNIQ, sub_region = GENE_SUB_REGS
        ),
        
        # Identify pauses
        expand(
            PROJ + "/stats/" + PROJ + "_{win}{grp}pausing.tsv",
            sam_grp = GENE_SUB_GRPS, win = WIN_SIZE, grp = ALL_GROUPS
        ),

        # final analysis and report
        PROJ + "/" + PROJ + "_analysis.html"
        
        


# Run dedup subsample all reads
include: "rules/04_FP_dedup_subsample_gene.snake"

# Run featureCounts
include: "rules/04_FP_featureCounts.snake"

# Run regions subsampled bedgraph files
include: "rules/05_FP_bedgraphs.snake"

# Run find pauses
include: "rules/06_FP_find_pauses.snake"

# final report
include: "rules/07_FP_plots.snake"
