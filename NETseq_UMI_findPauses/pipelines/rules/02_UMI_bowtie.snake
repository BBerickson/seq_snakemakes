# ====== Rules for aligning reads with bowtie2 =================================


# Align trimmed reads with bowtie2
rule bowtie:
    input:
        R1  = PROJ + "/UMI/{sample}_R1_trim.fastq.gz"
    output:
        bam   = temp(PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam"),
        bai   = temp(PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam.bai"),
        stats = PROJ + "/bams/{sample}_bowtie_stats.txt"
    params:
        job_name = "{sample}_bowtie",
        memory   = MEMORY * 3,
        idx      = INDEX_PATH + INDEX_SAMPLE,
        sortname = "{sample}.temp",
        args     = CMD_PARAMS["bowtie2"]
    log:
        out = PROJ + "/logs/{sample}_bowtie.out",
        err = PROJ + "/logs/{sample}_bowtie.err"
    message:
        "Aligning reads with Bowtie2 for {wildcards.sample}"
    threads: 
        12
    shell:
        """
        # By default bowtie2 performs end-to-end alignment
        # By default bowtie2 searches for multiple alignments and reports the best one
        bowtie2 \
            -p {threads} \
            -x {params.idx} \
            -U {input.R1} \
            {params.args} \
            2> {output.stats} \
            | samtools view -bF4q5 - \
            | samtools sort - -T {params.sortname} -@ {threads} -O bam \
            > {output.bam}

        samtools index -@ {threads} {output.bam}
        
        """


# Combine bowtie2 summaries
rule bowtie_summary:
    input:
        sorted(expand(
            PROJ + "/bams/{sample}_bowtie_stats.txt",
            sample = SAMS_UNIQ
        ))
    output:
        PROJ + "/stats/" + PROJ + "_aligned.tsv"
    params:
        job_name = PROJ + "_bowtie_summary",
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_bowtie_summary.out",
        err = PROJ + "/logs/" + PROJ + "_bowtie_summary.err"
    message:
        "Creating " + PROJ + " bowtie2 summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                name = os.path.basename(file)
                name = re.sub("_bowtie_stats.txt", "", name)

                for line in open(file, "r"):
                    line  = re.sub("; of these:", "", line.strip())
                    line  = re.sub(" \([0-9\.%]+\)", "", line)
                    words = line.split(" ")
                    num   = words[0]
                    met   = words[1:]
                    met   = " ".join(met)

                    out.write("%s\t%s\t%s\n" % (name, met, num))


