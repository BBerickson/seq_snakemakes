# ===== Snake file for processing Bowtie ================================

# Configure shell for all rules
shell.executable("/bin/bash")
shell.prefix("[ -f ~/.bash_profile ] && source ~/.bash_profile; set -o nounset -o pipefail -o errexit -x; ")

# python packages
import os
import sys
import yaml
from pathlib import Path

# Include custom Python functions
include: "funs.py"

# ------------------------------------------------------------------------------
# Load main genome config
# ------------------------------------------------------------------------------

GENOME = config["GENOME"]
GENOME_CONFIG = Path("pipelines/ref") / f"{GENOME}.yaml"

if not GENOME_CONFIG.exists():
    sys.exit(f"ERROR: {GENOME} is not a valid GENOME selection.")

# Load the main config file into Snakemake's config dictionary
configfile: str(GENOME_CONFIG)

# ------------------------------------------------------------------------------
# Load additional genome-specific configs manually
# ------------------------------------------------------------------------------

# Docker container
singularity:
    config["CONTAINER"] 
    
raw_indexes = config['INDEXES']
INDEXES = [raw_indexes] if isinstance(raw_indexes, str) else [raw_indexes[0]]


# Paths to additional config files
GENOME_CONFIG1 = Path("pipelines/ref") / f"{INDEXES[0]}.yaml"

# Validate existence
if not GENOME_CONFIG1.exists():
    sys.exit(f"ERROR: Config file not found for index '{INDEXES[0]}'. Expected at: {GENOME_CONFIG1}")

# Load additional configs
with open(GENOME_CONFIG1) as f:
    config1 = yaml.safe_load(f)
    
# ------------------------------------------------------------------------------
# Assign parameters from configs
# ------------------------------------------------------------------------------

PROJ         = config.get("PROJ")
RAW_DATA     = config.get("RAW_DATA")
ALL_SAMPLES  = config.get("SAMPLESrmat")
SEQ_DATE     = config.get("SEQ_DATE")
GROUPS_COMP  = config.get("GROUPS_COMP")
CMD_PARAMS   = config.get("CMD_PARAMS")
COLORS       = config.get("COLORS")
NORM         = config.get("NORM")
ORIENTATION  = config.get("ORIENTATION")
USER         = config.get("USER")

# From additional configs
GTF          = config1.get("GTF")

# Sample and group lists
SAMS = [[y, x] for y in ALL_SAMPLES for x in ALL_SAMPLES[y]]
SAMS = [x[1] for x in SAMS]
GRPS = [x for x in GROUPS_COMP]

# Gene subsampling groups
SAM_GRPS      = [x + "-" + y for y in ALL_SAMPLES for x in ALL_SAMPLES[y]]

GRPS_UNIQ = list(dict.fromkeys(GRPS))
SAMS_UNIQ = list(dict.fromkeys(SAMS))

# Print summary of samples and groups
print("SAMS (%s): %s\n" % (len(SAMS), SAMS))
print("GRPS (%s): %s\n" % (len(GRPS), GRPS))
print("SAMS_UNIQ (%s): %s\n" % (len(SAMS_UNIQ), SAMS_UNIQ))
print("GRPS_UNIQ (%s): %s\n" % (len(GRPS_UNIQ), GRPS_UNIQ))
print("SAM_GRPS (%s): %s\n" % (len(SAM_GRPS), SAM_GRPS))

# Wildcard constraints
GRP_REGEX = "[a-zA-Z0-9_\-,]+"

wildcard_constraints:
    sample  = "[a-zA-Z0-9_\-]+",
    group   = GRP_REGEX,

BAM_PATH = _get_bampath(NORM)
COLS_DICT = _get_colors(SAMS_UNIQ, COLORS)
print("COLS_DICT (%s): %s\n" % (len(COLS_DICT), COLS_DICT))

# Final output files
rule all:
    input:
        # rmats
        expand(
          PROJ + "/rmats/{compgroups}/SE.MATS.JC.txt",
            compgroups = GRPS_UNIQ
        )


# Run rMATS
include: "rules/04_rmats.snake"


