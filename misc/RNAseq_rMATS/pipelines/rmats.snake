# ===== Snake file for processing Bowtie ================================

# Configure shell for all rules
shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; set -o nounset -o pipefail -o errexit -x; ")

# python packages
import os
import glob
import re

# include my python common functions
include: "funs.py"

# Add genome specific config
GENOME = config["GENOME"]

GENOME_CONFIG = "pipelines/ref/" + GENOME + ".yaml"

if not os.path.exists(GENOME_CONFIG):
    sys.exit("ERROR: " + GENOME + " is not a valid GENOME selection.")

configfile:
    GENOME_CONFIG

# Parameters from config.yaml
PROJ            = config["PROJ"]
RAW_DATA        = config["RAW_DATA"]
SAMPLES         = config["SAMPLESr"]
GROUPS_COMP     = config["GROUPS_COMP"]
SEQ_DATE        = config["SEQ_DATE"]
GTF             = config["GTF"]
CMD_PARAMS      = config["CMD_PARAMS"]
NORM            = config["NORM"]
ORIENTATION      = config["ORIENTATION"]
USER            = config["USER"]

# Sample and group lists
SAMS = [[y, x] for y in SAMPLES for x in SAMPLES[y]]
SAMS = [x[1] for x in SAMS]
GRPS = [x for x in GROUPS_COMP]

# Gene subsampling groups
SAM_GRPS      = [x + "-" + y for y in SAMPLES for x in SAMPLES[y]]

GRPS_UNIQ = list(dict.fromkeys(GRPS))
SAMS_UNIQ = list(dict.fromkeys(SAMS))

# Print summary of samples and groups
print("SAMS (%s): %s\n" % (len(SAMS), SAMS))
print("GRPS (%s): %s\n" % (len(GRPS), GRPS))
print("SAMS_UNIQ (%s): %s\n" % (len(SAMS_UNIQ), SAMS_UNIQ))
print("GRPS_UNIQ (%s): %s\n" % (len(GRPS_UNIQ), GRPS_UNIQ))
print("SAM_GRPS (%s): %s\n" % (len(SAM_GRPS), SAM_GRPS))

# Wildcard constraints
GRP_REGEX = "[a-zA-Z0-9_\-,]+"

wildcard_constraints:
    sample  = "[a-zA-Z0-9_\-]+",
    group   = GRP_REGEX,

BAM_PATH = _get_bampath(NORM)

# Final output files
rule all:
    input:
        # rmats
        expand(
          PROJ + "/rmats/{compgroups}/SE.MATS.JC.txt",
            compgroups = GRPS_UNIQ
        )


# Run rMATS
include: "rules/04_rmats.snake"


