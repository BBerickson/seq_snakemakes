# ===== Snake file for processing ChIP-seq data ================================

# Configure shell for all rules
shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; set -o nounset -o pipefail -o errexit -x; ")

# Python packages
import os
import sys
import yaml
from pathlib import Path

# Include custom Python functions
include: "funs.py"

# ------------------------------------------------------------------------------
# Load main genome config
# ------------------------------------------------------------------------------

GENOME = config["GENOME"]
GENOME_CONFIG = Path("pipelines/ref") / f"{GENOME}.yaml"

if not GENOME_CONFIG.exists():
    sys.exit(f"ERROR: {GENOME} is not a valid GENOME selection.")

# Load the main config file into Snakemake's config dictionary
configfile: str(GENOME_CONFIG)

# ------------------------------------------------------------------------------
# Load additional genome-specific configs manually
# ------------------------------------------------------------------------------

INDEX_SAMPLE = config['INDEX_SAMPLE']
INDEX_SPIKE  = ""

# Paths to additional config files
GENOME_CONFIG1 = Path("pipelines/ref") / f"{INDEX_SAMPLE}.yaml"

# Validate existence
if not GENOME_CONFIG1.exists():
    sys.exit(f"ERROR: {INDEX_SAMPLE} is not a valid INDEX_SAMPLE selection.")

# Load additional configs
with open(GENOME_CONFIG1) as f:
    config1 = yaml.safe_load(f)

# ------------------------------------------------------------------------------
# Assign parameters from configs
# ------------------------------------------------------------------------------

# From main config
PROJ         = config.get("PROJ")
RAW_DATA     = config.get("RAW_DATA")
ALL_SAMPLES  = config.get("SAMPLES")
SEQ_DATE     = config.get("SEQ_DATE")
INDEX_PATH   = config.get("INDEX_PATH")
CMD_PARAMS   = config.get("CMD_PARAMS")
COLORS       = config.get("COLORS")
NORM         = config.get("NORM")
ORIENTATION  = config.get("ORIENTATION")
REGIONS      = config.get("REGIONS")
USER         = config.get("USER")

# From additional configs
MY_REF      = config1.get("MY_REF")
PI_REF      = config1.get("PI_REF")
GENELIST    = config1.get("GENELIST")

BW_DIR = PROJ + "/raw_bw"
os.makedirs(BW_DIR, exist_ok = True)

# Simplify ALL_SAMPLES dictionary
# ALL_SAMPLES = {'SECTION-1':{'SAMPLING-GROUP-1':{newname1:[fastq1],newname2:[fastq2]}}} or {'SECTION-1':{'SAMPLING-GROUP-1':{newname1:[fastq1,input1],newname2:[fastq2,input2]}}}
# collapse sections and combine subsampling groups
def process_samples(all_samples):
    SAMPLES = {}  # SAMPLES {newname1:[fastq1],newname2:[fastq2]}
    SAMPIN = {}   # SAMPIN {newname1:[fastq1,input1],newname2:[fastq2,input2]}
    GROUPS = {}   # GROUPS {SAMPLING-GROUP-1:[fastq1], SAMPLING-GROUP-2:[fastq2]}

    for section, pairs in all_samples.items():
        for pair_name, samples in pairs.items():
            for sample_name, values in samples.items():
                fastq = values[0]
                input_file = values[1] if len(values) > 1 else None

                # Populate SAMPLES
                SAMPLES.setdefault(sample_name, []).append(fastq)

                # Populate SAMPIN
                if input_file:
                    SAMPIN[sample_name] = [fastq, input_file]
                else:
                    SAMPIN[sample_name] = [fastq]

                # Populate GROUPS
                GROUPS.setdefault(pair_name, []).append(fastq)

    return SAMPLES, SAMPIN, GROUPS

SAMPLES, SAMPIN, GROUPS = process_samples(ALL_SAMPLES)


# unpack samples and groups
SAMS = [[y, x] for y in SAMPLES for x in SAMPLES[y]]
NAMS = [x[0] for x in SAMS] # newnames
SAMS = [x[1] for x in SAMS] # samples
GRPS = [[y, x] for y in GROUPS for x in GROUPS[y]]
GRPS = [x[0] for x in GRPS] # groups
NAMS_UNIQ = list(dict.fromkeys(SAMS))
GRPS_UNIQ = list(dict.fromkeys(GRPS))
SAMS_UNIQ = list(dict.fromkeys(SAMS))

# Print summary of samples and groups
print("SAMPLES (%s): %s\n" % (len(SAMPLES), SAMPLES))
print("GROUPS (%s): %s\n" % (len(GROUPS), GROUPS))
print("SAMPIN (%s): %s\n" % (len(SAMPIN), SAMPIN))
print("SAMS (%s): %s\n" % (len(SAMS), SAMS))
print("NAMS (%s): %s\n" % (len(NAMS), NAMS))
print("GRPS (%s): %s\n" % (len(GRPS), GRPS))
print("SAMS_UNIQ (%s): %s\n" % (len(SAMS_UNIQ), SAMS_UNIQ))
print("NAMS_UNIQ (%s): %s\n" % (len(NAMS_UNIQ), NAMS_UNIQ))
print("GRPS_UNIQ (%s): %s\n" % (len(GRPS_UNIQ), GRPS_UNIQ))

# Wildcard constraints
WILDCARD_REGEX = "[a-zA-Z0-9_\-]+" # Matches alphanumeric characters, underscores, and hyphens

wildcard_constraints:
    newnam = WILDCARD_REGEX,
    region = "543|5|3|PI|EI"

COLS_DICT = _get_colors(SAMS_UNIQ, COLORS)

NORMS = _get_normtype(CMD_PARAMS["bamCoverage"],NORM,CMD_PARAMS["bamCoverageBL"],ORIENTATION)

BAM_PATH = _get_bampath(NORM)

COVARGS = _get_all_matrixtypes(REGIONS,NORMS,CMD_PARAMS,GENELIST)

# Create the Cartesian product
product = [(s, i, v) for s in SAMS_UNIQ for i, v in zip(REGIONS, COVARGS)]

# Convert to DataFrame
REGIONS_COVARGS = pd.DataFrame(product, columns=['Newnam', 'Region', 'Value'])

print(REGIONS_COVARGS)

# Final output files
rule all:
    input:
        # bamCoverage
        expand(
          PROJ + "/bw/{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORMS + ".bw",
          newnam = SAMS_UNIQ
        ),
        
        # matrix file
        expand(
          PROJ + "/URLS/{region}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_{covarg}_matrix.url.txt",
           zip, region=REGIONS_COVARGS['Region'], covarg=REGIONS_COVARGS['Value']
        )

# BW with deeptools bamCoverage
include: "rules/04_get_BW_UnStranded.snake"
# make matrix files
include: "rules/05_UnStranded_matrix.snake"

