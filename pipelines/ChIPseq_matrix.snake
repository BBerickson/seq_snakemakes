# ===== Snake file for processing ChIP-seq data ================================

from pytools.persistent_dict import PersistentDict
import os
import glob
import re
import subprocess
import gzip
import random


# Configure shell for all rules
shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; set -o nounset -o pipefail -o errexit -x; ")

#include my python common functions
include: "commonFun.snake"

# Parameters from config.yaml
PROJ          = config["PROJ"]
ALL_SAMPLES   = config["SAMPLES"]
SEQ_DATE      = config["SEQ_DATE"]
INDEX_PATH    = config["INDEX_PATH"]
INDEX_SAMPLE  = config["INDEX_SAMPLE"]
INDEX_SPIKE   = ""
MASK          = config["MASK"]
SNRNA         = config["SNRNA"]
SPIKE_SNRNA   = config["SPIKE_SNRNA"]
MY_REF        = config["MY_REF"]
PI_REF        = config["PI_REF"]
CMD_PARAMS    = config["CMD_PARAMS"]
COLORS        = config["COLORS"]
NORM          = config["NORM"]
USER          = config["USER"]
GENELIST      = config["GENELIST"]
MEMORY        = config["MEMORY"]

# Simplify ALL_SAMPLES dictionary
# subsampling groups can be listed in multiple sections
# collapse sections and combine subsampling groups
SAMPLES = {} # SAMPLES {newname1:[fastq1],newname2:[fastq2]}
GROUPS = {} # GROUPS {group:[fastq1,fastq2]} 
GROUP2 = {} # GROUP2={group1:[newname1],group2:[newname3]} 
for _, d in ALL_SAMPLES.items():
    for key, value in d.items():

        if not isinstance(value, dict):
            value = {key: value}  # make it a dictionary for uniformity

        for sub_keys, sub_value in value.items():
            if key in GROUPS:
                if sub_value not in GROUPS[key]:
                    GROUPS[key].append(sub_value)
            else:
                GROUPS[key] = [sub_value]
                
            if key not in GROUP2:
                GROUP2[key] = [sub_keys]
            
            if sub_keys in SAMPLES:
                if sub_value not in SAMPLES[sub_keys]:
                    SAMPLES[sub_keys].append(sub_value)

            else:
                SAMPLES[sub_keys] = [sub_value]

# unpack samples and groups
SAMS = [[y, x] for y in SAMPLES for x in SAMPLES[y]]
NAMS = [x[0] for x in SAMS]
GRPS = [[y, x] for y in GROUPS for x in GROUPS[y]]
SAMS = [x[1] for x in GRPS]
GRPS = [x[0] for x in GRPS]
NAMS_UNIQ = list(dict.fromkeys(NAMS[::2])) # limit to just every other ... first in the pair for ChIP Input pairs
GRPS_UNIQ = list(dict.fromkeys(GRPS))
SAMS_UNIQ = list(dict.fromkeys(SAMS))

print("SAMPLES (%s): %s\n" % (len(SAMPLES), SAMPLES))
print("GROUPS (%s): %s\n" % (len(GROUPS), GROUPS))
print("GROUP2 (%s): %s\n" % (len(GROUP2), GROUP2))
# Print summary of samples and groups
print("SAMS (%s): %s\n" % (len(SAMS), SAMS))
print("NAMS (%s): %s\n" % (len(NAMS), NAMS))
print("GRPS (%s): %s\n" % (len(GRPS), GRPS))
print("SAMS_UNIQ (%s): %s\n" % (len(SAMS_UNIQ), SAMS_UNIQ))
print("NAMS_UNIQ (%s): %s\n" % (len(NAMS_UNIQ), NAMS_UNIQ))
print("GRPS_UNIQ (%s): %s\n" % (len(GRPS_UNIQ), GRPS_UNIQ))


# Wildcard constraints
GRP_REGEX = "[a-zA-Z0-9_\-]+"

wildcard_constraints:
    sample  = "[a-zA-Z0-9_\-]+",
    group   = GRP_REGEX,
    sam_grp = "[a-zA-Z0-9_\-]+-[a-zA-Z0-9_\-]+"


COLS_DICT = _get_colors(NAMS_UNIQ, COLORS)

NORMS = _get_normtype(CMD_PARAMS["bamCoverage"],NORM,CMD_PARAMS["bamCoverageBL"])

NORM543 = _get_matrixtype(NORMS,CMD_PARAMS["region543"],GENELIST)
NORM5 = _get_matrixtype(NORMS,CMD_PARAMS["reference5"],GENELIST)
NORM3 = _get_matrixtype(NORMS,CMD_PARAMS["reference3"],GENELIST)
NORMPI = NORMS + GENELIST

BAM_PATH = _get_bampath(NORM)

# Final output files
rule all:
    input:
        # bamCoverage
        PROJ + "/URLS/" + PROJ + "_" + INDEX_SAMPLE + "_" + NORMS + "_bw_URL.txt",
        
        # 543 matrix file
        PROJ + "/URLS/543_" + PROJ + "_" + INDEX_SAMPLE + "_" + NORM543 + "_matrix.url.txt",
        
        # 5 matrix file
        PROJ + "/URLS/5_" + PROJ + "_" + INDEX_SAMPLE + "_" + NORM5 + "_matrix.url.txt",
        
        # 3 matrix file
        PROJ + "/URLS/3_" + PROJ + "_" + INDEX_SAMPLE + "_" + NORM3 + "_matrix.url.txt"
        #,
        
        # PI matrix file
        #PROJ + "/URLS/PI_" + PROJ + "_" + INDEX_SAMPLE + "_" + NORMPI + "_matrix.url.txt"


# BW with deeptools bamCoverage
include: "rules/04_bamCoverage.snake"
# 543 matrix file
include: "rules/05_543_matrix.snake"
# 5 matrix file
include: "rules/05_5_matrix.snake"
# 3 matrix file
include: "rules/05_3_matrix.snake"
# PI matrix file
include: "rules/05_PI_matrix.snake"
