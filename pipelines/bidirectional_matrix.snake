# ===== Snake file for processing mNET-seq data ================================

import os
import glob
import re


# Configure shell for all rules
shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; set -o nounset -o pipefail -o errexit -x; ")

#include my python common functions
include: "funs.py"

# Parameters from config.yaml
PROJ            = config["PROJ"]
ALL_SAMPLES     = config["SAMPLES"]
SEQ_DATE        = config["SEQ_DATE"]
INDEX_PATH      = config["INDEX_PATH"]
INDEX_SAMPLE    = config["INDEX_SAMPLE"]
INDEX_SPIKE     = ""
FW_REF          = config["FW_REF"]
REV_REF         = config["REV_REF"]
CMD_PARAMS      = config["CMD_PARAMS"]
COLORS          = config["COLORS"]
NORM            = config["NORM"]
ORENTATION      = config["ORENTATION"]
USER            = config["USER"]
GENELIST        = config["GENELIST"]

# Simplify ALL_SAMPLES dictionary
# subsampling groups can be listed in multiple sections
# collapse sections and combine subsampling groups
SAMPLES = {} # SAMPLES {newname1:[fastq1],newname2:[fastq2]}
GROUPS = {} # GROUPS {group:[fastq1,fastq2]} 
GROUP2 = {} GROUP2={group1:[newname1,newname2],group2:[newname3,newname4]} 
for _, d in ALL_SAMPLES.items():
    for key, value in d.items():

        if not isinstance(value, dict):
            value = {key: value}  # make it a dictionary for uniformity

        for sub_keys, sub_value in value.items():
            if key in GROUPS:
                if sub_value not in GROUPS[key]:
                    GROUPS[key].append(sub_value)
            else:
                GROUPS[key] = [sub_value]
                
            if key in GROUP2:
                if sub_keys not in GROUP2[key]:
                    GROUP2[key].append(sub_keys)
            else:
                GROUP2[key] = [sub_keys]
                
            if sub_keys in SAMPLES:
                if sub_value not in SAMPLES[sub_keys]:
                    SAMPLES[sub_keys].append(sub_value)

            else:
                SAMPLES[sub_keys] = [sub_value]

# unpack samples and groups
SAMS = [[y, x] for y in SAMPLES for x in SAMPLES[y]]
NAMS = [x[0] for x in SAMS]
GRPS = [[y, x] for y in GROUPS for x in GROUPS[y]]
SAMS = [x[1] for x in GRPS]
GRPS = [x[0] for x in GRPS]
NAMS_UNIQ = list(dict.fromkeys(NAMS))
GRPS_UNIQ = list(dict.fromkeys(GRPS))
SAMS_UNIQ = list(dict.fromkeys(SAMS))

print("SAMPLES (%s): %s\n" % (len(SAMPLES), SAMPLES))
print("GROUPS (%s): %s\n" % (len(GROUPS), GROUPS))
print("GROUP2 (%s): %s\n" % (len(GROUP2), GROUP2))
# Print summary of samples and groups
print("SAMS (%s): %s\n" % (len(SAMS), SAMS))
print("NAMS (%s): %s\n" % (len(NAMS), NAMS))
print("GRPS (%s): %s\n" % (len(GRPS), GRPS))
print("SAMS_UNIQ (%s): %s\n" % (len(SAMS_UNIQ), SAMS_UNIQ))
print("NAMS_UNIQ (%s): %s\n" % (len(NAMS_UNIQ), NAMS_UNIQ))
print("GRPS_UNIQ (%s): %s\n" % (len(GRPS_UNIQ), GRPS_UNIQ))

# Wildcard constraints
GRP_REGEX = "[a-zA-Z0-9_\-]+"

wildcard_constraints:
    sample  = "[a-zA-Z0-9_\-]+",
    group   = GRP_REGEX,
    sam_grp = "[a-zA-Z0-9_\-]+-[a-zA-Z0-9_\-]+"


COLS_DICT = _get_colors(NAMS_UNIQ, COLORS)

NORMS = _get_normtype(CMD_PARAMS["bamCoverage"],NORM,CMD_PARAMS["bamCoverageBL"],ORENTATION)

BAM_PATH = _get_bampath(NORM)

REGIONS = ["5"] # needs to be the suffix of region in CMD_PARAMS. eg. region: "543", "5", "3", "PI", "EI" 

COVARGS = _get_all_matrixtypes(REGIONS,NORMS,CMD_PARAMS,GENELIST)

# Create the Cartesian product
product = [(s, i, v) for s in NAMS_UNIQ for i, v in zip(REGIONS, COVARGS)]

# Convert to DataFrame
REGIONS_COVARGS = pd.DataFrame(product, columns=['Newnam', 'Region', 'Value'])

print(REGIONS_COVARGS)

# Final output files
rule all:
    input:
        # bamCoverage
        expand(
          PROJ   + "/bw/{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORMS + "_fw.bw",
          newnam = NAMS_UNIQ
        ),
        expand(
          PROJ   + "/bw/{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORMS + "_rev.bw",
          newnam = NAMS_UNIQ
        ),
        
        # matrix file
        expand(
          PROJ + "/URLS/{region}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_{covarg}_bidirectonal_matrix.url.txt",
           zip, region=REGIONS_COVARGS['Region'], covarg=REGIONS_COVARGS['Value']
        )

# BW with deeptools bamCoverage
include: "rules/04_bamCoverage_stranded.snake"
# 5 sense matrix file
include: "rules/05_bidirectional_matrix.snake"


