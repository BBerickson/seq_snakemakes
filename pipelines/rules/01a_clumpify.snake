# ===== Snakefile for removing duplicates with clumpify =====================

# Run clumpify for single-end reads
rule clumpify:
    input:
        lambda wildcards: _get_fqs(wildcards.sample, RAW_DATA, FASTQ_DIR, full_name=True, paired=PAIREDMAP[wildcards.sample])
    output:
        R1 = temp(PROJ + "/{sample}_R1_clumpify.fastq.gz"),
        R2 = temp(PROJ + "/{sample}_R2_clumpify.fastq.gz"),
        log = PROJ + "/clumpify/{sample}_clumpify.log"
    params:
        job_name = "{sample}_clumpify",
        args = lambda wildcards: CMD_PARAMS["clumpify"]["paired" if PAIREDMAP[wildcards.sample] else "single"],
        is_paired = lambda wildcards: PAIREDMAP[wildcards.sample],
        reduced_mem = lambda wildcards, resources: int(resources.memory * 0.9)
    resources:
        memory = lambda wildcards, input: memory_estimator(input, 10, 15)
    log:
        out = PROJ + "/logs/{sample}_clumpify.out",
        err = PROJ + "/logs/{sample}_clumpify.err"
    threads:
        1
    shell:
        """
        if [ -z "{params.args}" ]; then
            # No clumpify args, just copy files
            cp {input[0]} {output.R1}
            if [ "{params.is_paired}" = "True" ]; then
                cp {input[1]} {output.R2}
            else
                touch {output.R2}
            fi
            echo "Reads In:  0,0" >> {output.log}
            echo "Duplicates Found:  0,0" >> {output.log}
        elif [ "{params.is_paired}" = "True" ]; then
            # Paired-end processing
            clumpify.sh -Xmx{params.reduced_mem}g \
                groups={params.reduced_mem} \
                in1={input[0]} in2={input[1]} \
                out1={output.R1} out2={output.R2} \
                {params.args} 2>> {output.log}
        else
            # Single-end processing
            clumpify.sh -Xmx{params.reduced_mem}g \
                groups={params.reduced_mem} \
                in={input[0]} \
                out={output.R1} \
                {params.args} 2>> {output.log}
            # Create empty R2 to satisfy output declaration
            touch {output.R2}
        fi
        """



# Create clumpify summary
rule clumpify_summary:
    input:
        expand(
            PROJ + "/clumpify/{sample}_clumpify.log",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_clumpify.tsv"
    params:
        job_name = PROJ + "_clumpify_summary",
        pairedmap = PAIREDMAP
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 1, 1) # multiplier, min, max, unit=GB
    log:
        out = PROJ + "/logs/" + PROJ + "_clumpify_summary.out",
        err = PROJ + "/logs/" + PROJ + "_clumpify_summary.err"
    threads:
        1
    shell:
        """
        python - << 'EOF'
import sys
sys.path.insert(0, "pipelines/")

import rules

rules._clumpify_summary("{input}".split(), "{output[0]}", "{params.pairedmap}")
EOF
        """


