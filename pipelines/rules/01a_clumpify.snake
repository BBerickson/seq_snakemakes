# ===== Snakefile for removing duplicates with clumpify =====================

# Run clumpify for paired-end reads
rule clumpify_paired:
    input:
        _get_fq_paths
    output:
        R1  = temp(PROJ + "/{sample}_R1_clumpify.fastq.gz"),
        R2  = temp(PROJ + "/{sample}_R2_clumpify.fastq.gz"),
        log = PROJ + "/clumpify/{sample}_clumpify.log"
    params:
        job_name = "{sample}_clumpify",
        args     = CMD_PARAMS["clumpify"]
    resources:
        memory   = MEMORY * 10 + 20
    log:
        out = PROJ + "/logs/{sample}_clumpify.out",
        err = PROJ + "/logs/{sample}_clumpify.err"
    message:
        "Removing duplicats for {wildcards.sample}" 
    threads:
        1
    run:
        # If no params are passed, make a symlink to original fastq
        if len(params.args) == 0:
            os.symlink(input[0], output[0])
        else:
            shell(
                """
                clumpify.sh -Xmx{resources.memory}g \
                    in1={input[0]} in2={input[1]} \
                    out1={output[0]} out2={output[1]} \
                    {params.args} 2>> {output[2]}
                """
            )


# Create clumpify summary
rule clumpify_summary:
    input:
        expand(
            PROJ + "/clumpify/{sample}_clumpify.log",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_clumpify.tsv"
    params:
        job_name = PROJ + "_clumpify_summary"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_clumpify_summary.out",
        err = PROJ + "/logs/" + PROJ + "_clumpify_summary.err"
    message:
        "Creating " + PROJ + " clumpify summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                name = os.path.basename(file)
                name = re.sub("_clumpify.log", "", name)

                for line in open(file, "r"):
                    match = re.search("Reads In: |Duplicates Found:", line)

                    if match:
                        num = re.search("[0-9,]{2,}", line)
                        num = int(re.sub(",", "", num.group(0)))  # Convert to int and remove comma
                        num_divided = num // 2  # Divide num by 2 using integer division (floor division)
                        met = re.search("[\w\(\) ]+:", line).group(0)
                        met = re.sub(":", "", met)
                        met = met.strip()
                        met = re.sub(" ", "_", met)

                        out.write("%s\t%s\t%s\n" % (name, met, num_divided))


