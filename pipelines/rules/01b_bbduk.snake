# ===== Snakefile for trimming reads with bbduk =====================

# Run bbduk
rule bbduk:
    input:
        R1  = PROJ + "/{sample}_R1_clumpify.fastq" + (".gz" if config.get("compress_temp", True) else ""),
        R2  = PROJ + "/{sample}_R2_clumpify.fastq" + (".gz" if config.get("compress_temp", True) else "")
    output:
        R1 = temp(PROJ + "/{sample}_R1.fastq" + (".gz" if config.get("compress_temp", True) else "")),
        R2 = temp(PROJ + "/{sample}_R2.fastq" + (".gz" if config.get("compress_temp", True) else "")),
        log = PROJ + "/bbduk/{sample}_bbduk.log"
    params:
        job_name = "{sample}_bbduk",
        args = lambda wildcards: CMD_PARAMS["bbduk"]["paired" if PAIREDMAP[wildcards.sample] else "single"],
        bar = lambda wildcards: _bbduk_adapter_param(BARCODES),
        is_paired = lambda wildcards: PAIREDMAP[wildcards.sample]
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 2, 5)
    log:
        out = PROJ + "/logs/{sample}_bbduk.out",
        err = PROJ + "/logs/{sample}_bbduk.err"
    threads:
        12
    shell:
        """
        if [ -z "{params.args}" ]; then
            # No bbduk args, just copy files
            cp {input.R1} {output.R1}
            if [ "{params.is_paired}" = "True" ]; then
                cp {input.R2} {output.R2}
            else
                touch {output.R2}
            fi
            echo "Total Removed:  0 reads (0.0%)  0 bases (0.0%)" >> {output.log}
        elif [ "{params.is_paired}" = "True" ]; then
            # Paired-end processing
            bbduk.sh -Xmx{resources.memory}g threads={threads} \
                in1={input.R1} in2={input.R2} \
                out1={output.R1} out2={output.R2} \
                {params.bar} {params.args} 2>> {output.log}
        else
            # Single-end processing
            bbduk.sh -Xmx{resources.memory}g threads={threads} \
                in={input.R1} \
                out={output.R1} \
                {params.bar} {params.args} 2>> {output.log}
            # Create empty R2 to satisfy output declaration
            touch {output.R2}
        fi
        """

        
  
# Create bbduk summary
rule bbduk_summary:
    input:
        expand(
            PROJ + "/bbduk/{sample}_bbduk.log",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_bbduk.tsv"
    params:
        job_name = PROJ + "_bbduk_summary"
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 1, 1) # multiplier, min, max, unit=GB
    log:
        out = PROJ + "/logs/" + PROJ + "_bbduk_summary.out",
        err = PROJ + "/logs/" + PROJ + "_bbduk_summary.err"
    message:
        "Creating " + PROJ + " bbduk summary"
    threads:
        1
    shell:
        """
        python - << 'EOF'
import sys
sys.path.insert(0, "pipelines/")

import rules

rules._bbduk_summary("{input}".split(), "{output[0]}")
EOF
        """


