# ===== Snakefile for trimming reads with bbduk =====================

# Run bbduk
rule bbduk:
    input:
        R1  = PROJ + "/{sample}_R1_clumpify.fastq.gz",
        R2  = PROJ + "/{sample}_R2_clumpify.fastq.gz"
    output:
        R1 = temp(PROJ + "/{sample}_R1.fastq.gz"),
        R2 = temp(PROJ + "/{sample}_R2.fastq.gz"),
        log = PROJ + "/bbduk/{sample}_bbduk.log"
    params:
        job_name = "{sample}_bbduk",
        args = lambda wildcards: CMD_PARAMS["bbduk"]["paired" if PAIREDMAP[wildcards.sample] else "single"],
        bar = lambda wildcards: _bbduk_adapter_param(BARCODES)
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 2, 5)
    log:
        out = PROJ + "/logs/{sample}_bbduk.out",
        err = PROJ + "/logs/{sample}_bbduk.err"
    threads:
        12
    run:
        if len(params.args) == 0:
            shell(
                """
                cp {input.R1} {output.R1}
                cp {input.R2} {output.R2}
                echo "Total Removed:  0 reads (0.0%)  0 bases (0.0%)" >> {output.log}
                """
            )
        else:
            if PAIREDMAP[wildcards.sample]:
                shell(
                    """
                    bbduk.sh -Xmx{resources.memory}g threads={threads} \
                        in1={input.R1} in2={input.R2} \
                        out1={output.R1} out2={output.R2} \
                        {params.bar} {params.args} 2>> {output.log}
                    """
                )
            else:
                shell(
                    """
                    bbduk.sh -Xmx{resources.memory}g threads={threads} \
                        in={input.R1} \
                        out={output.R1} \
                        {params.bar} {params.args} 2>> {output.log}
                    # Create empty R2 to satisfy output declaration
                    touch {output.R2}
                    """
                )

        
  
# Create bbduk summary
rule bbduk_summary:
    input:
        expand(
            PROJ + "/bbduk/{sample}_bbduk.log",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_bbduk.tsv"
    params:
        job_name = PROJ + "_bbduk_summary"
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 1, 1) # multiplier, min, max, unit=GB
    log:
        out = PROJ + "/logs/" + PROJ + "_bbduk_summary.out",
        err = PROJ + "/logs/" + PROJ + "_bbduk_summary.err"
    message:
        "Creating " + PROJ + " bbduk summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                name = os.path.basename(file)
                name = re.sub("_bbduk.log", "", name)

                for line in open(file, "r"):
                    match = re.search("Total Removed:", line)

                    if match:
                        mett = line.strip().split("\t")
                        num = mett[1].strip()
                        num = re.sub(" reads ", "", num)
                        met = re.search("[\w\(\) ]+:", line).group(0)
                        met = re.sub(":", "", met)
                        met = met.strip()
                        met = re.sub(" ", "_", met)
                        out.write("%s\t%s\t%s\n" % (name, met, num))


