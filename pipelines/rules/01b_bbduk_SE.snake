# ===== Snakefile for trimming reads with bbduk =====================

# Run bbduk
rule bbduk_paired:
    input:
        R1  = PROJ + "/{sample}_R1_clumpify.fastq.gz"
    output:
        R1  =  temp(PROJ + "/{sample}_R1.fastq.gz"),
        log =  PROJ + "/bbduk/{sample}_bbduk.log"
    params:
        job_name = "{sample}_bbduk",
        args     = CMD_PARAMS["bbduk"],
        bar      = lambda wildcards, input: _get_barcodes(BARCODES, input.R1)
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 2, 5)
    log:
        out = PROJ + "/logs/{sample}_bbduk.out",
        err = PROJ + "/logs/{sample}_bbduk.err"
    message:
        "Removing duplicats for {wildcards.sample}" 
    threads:
        12
    run:
        # If no params are passed, make a symlink to original fastq
        if len(params.args) == 0:
            shell(
                """
                cp {input[0]} {output[0]}
                echo "Total Removed:  0 reads (0.0%) 	0 bases (0.0%)" >> {output[1]}
                
                """
              )
        else:
            shell(
                """
                bbduk.sh -Xmx{resources.memory}g threads={threads} \
                    in={input[0]} \
                    out={output[0]} \
                    literal={params.bar} {params.args} 2>> {output[1]}
                """
            )
        
  
# Create bbduk summary
rule bbduk_summary:
    input:
        expand(
            PROJ + "/bbduk/{sample}_bbduk.log",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_bbduk.tsv"
    params:
        job_name = PROJ + "_bbduk_summary"
    resources:
        memory   = 1
    log:
        out = PROJ + "/logs/" + PROJ + "_bbduk_summary.out",
        err = PROJ + "/logs/" + PROJ + "_bbduk_summary.err"
    message:
        "Creating " + PROJ + " bbduk summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                name = os.path.basename(file)
                name = re.sub("_bbduk.log", "", name)

                for line in open(file, "r"):
                    match = re.search("Total Removed:", line)

                    if match:
                        mett = line.strip().split("\t")
                        num = mett[1].strip()
                        num = re.sub(" reads ", "", num)
                        met = re.search("[\w\(\) ]+:", line).group(0)
                        met = re.sub(":", "", met)
                        met = met.strip()
                        met = re.sub(" ", "_", met)
                        

                        out.write("%s\t%s\t%s\n" % (name, met, num))


