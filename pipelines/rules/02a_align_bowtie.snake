# ====== Rules for aligning reads =================================


# Align trimmed reads with bowtie2 R1 or R2
rule bowtie:
    input:
        R1 = PROJ + "/{sample}_R1.fastq.gz",
        R2 = PROJ + "/{sample}_R2.fastq.gz"
    output:
        bam   = temp(PROJ + "/{sample}_" + INDEX_MAP + ".bam"),
        bai   = temp(PROJ + "/{sample}_" + INDEX_MAP + ".bam.bai"),
        stats = PROJ + "/bams/{sample}_" + INDEX_MAP + "_bowtie_stats.txt"
    params:
        job_name = "{sample}_bowtie",
        idx      = INDEX_PATH + INDEX_MAP,
        args     = lambda wildcards: CMD_PARAMS["bowtie2"]["paired" if PAIREDMAP[wildcards.sample] else "single"],
        sortname = PROJ + "/{sample}.temp"
    resources:
        memory = lambda wildcards, input: memory_estimator(input, 3, 18)
    log:
        out = PROJ + "/logs/{sample}_bowtie.out",
        err = PROJ + "/logs/{sample}_bowtie.err"
    threads: 
        12
    run:
        if PAIREDMAP[wildcards.sample]:
            shell(
                """
                bowtie2 \
                    -p {threads} \
                    -x {params.idx} \
                    -1 {input.R1} -2 {input.R2} \
                    {params.args} \
                    2> {output.stats} \
                    | samtools sort - -T {params.sortname} -@ {threads} -O bam \
                    > {output.bam}

                samtools index -@ {threads} {output.bam}
                """
            )
        else:
            shell(
                """
                bowtie2 \
                    -p {threads} \
                    -x {params.idx} \
                    -U {input.R1} \
                    {params.args} \
                    2> {output.stats} \
                    | samtools sort - -T {params.sortname} -@ {threads} -O bam \
                    > {output.bam}

                samtools index -@ {threads} {output.bam}
                """
            )



# ====== Rules for aligning reads summmary =================================


# Align trimmed reads with bowtie2 summmary
rule bowtie_summmary:
    input:
        expand(
            PROJ + "/bams/{sample}_" + INDEX_MAP + "_bowtie_stats.txt",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_aligned.tsv"
    params:
        job_name = "bowtiePE_summmary"
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 1, 1) # multiplier, min, max, unit=GB
    log:
        out = PROJ + "/logs/bowtie_summmary.out",
        err = PROJ + "/logs/bowtie_summmary.err"
    message:
        "summmary Bowtie2 for"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                name = os.path.basename(file)
                name = re.sub("_" + INDEX_MAP + "_bowtie_stats.txt", "", name)

                for line in open(file, "r"):
                    match = re.search("overall alignment rate", line)

                    if match:
                        num = re.search("[0-9.%]+", line)
                        num = num.group(0).strip()
                        met = re.search("[a-z\s]+", line).group(0)
                        met = met.strip()
                        met = re.sub(" ", "_", met)

                        out.write("%s\t%s\t%s\n" % (name, met, num))
                    else:
                        line  = re.sub("; of these:", "", line.strip())
                        line  = re.sub(" \([0-9\.%]+\)", "", line)
                        words = line.split(" ")
                        num   = words[0]
                        met   = words[1:]
                        met   = " ".join(met)

                        out.write("%s\t%s\t%s\n" % (name, met, num))
                        
                        
                        

