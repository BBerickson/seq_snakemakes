# ====== Rules for filtering aligned reads with samtools =================================

# gets number for norm fraction sample
def _get_norm_samp(wildcards):
    sample = wildcards.sample + "_" + INDEX_SAMPLE
    filename =  PROJ + "/stats/" + PROJ + "_" + INDEX_SAMPLE + "_subsample_frac.tsv"
    num = 0
    with open(filename, "r") as file:
      for line in file:
        parts = line.strip().split('\t')
        if len(parts) == 3 and parts[0] == sample:
          num = parts[2]
          break
    return float(num)
    
# filter aligned reads
rule align_filter_sample:
    input:
        bam   = PROJ  + "/{sample}_" + INDEX_MAP + ".bam",
        bai   = PROJ  + "/{sample}_" + INDEX_MAP + ".bam.bai"
    output:
        bam    = PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam",
        bai    = PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam.bai",
        counts = PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_count.txt"
    params:
        job_name = "{sample}_align_filter",
        idx      = INDEX_PATH + INDEX_SAMPLE + ".txt",
        samp     = "{sample}_" + INDEX_SAMPLE,
        fa2      = FA_SAMPLE,
        sortname = PROJ + "/{sample}.temp"
    resources:
        memory   = MEMORY * 3
    log:
        out = PROJ + "/logs/{sample}_align_filter.out",
        err = PROJ + "/logs/{sample}_align_filter.err"
    message:
        "filtering reads {wildcards.sample}"
    threads: 
        12
    shell:
        """
        # filter
        samtools view {input.bam} $(head -n1 {params.idx}) \
        | samtools view -bT {params.fa2} - \
        | samtools sort - -T {params.sortname} -@ {threads} -O bam \
        > {output.bam}
        
        samtools index -@ {threads} {output.bam}
        echo "{params.samp} Filtered_reads $(samtools idxstats {output.bam} | awk '{{s+=$3}} END {{print s}}')" > {output.counts}
        
        """

# filter aligned spike in reads
rule align_filter_sample_spikein:
    input:
        bam = PROJ + "/{sample}_" + INDEX_MAP + ".bam",
        bai = PROJ + "/{sample}_" + INDEX_MAP + ".bam.bai"
    output:
        bam    = PROJ + "/bams/{sample}_" + INDEX_SPIKE + "_" + SEQ_DATE + ".bam",
        bai    = PROJ + "/bams/{sample}_" + INDEX_SPIKE + "_" + SEQ_DATE + ".bam.bai",
        counts = PROJ + "/bams/{sample}_" + INDEX_SPIKE + "_count.txt"
    params:
        job_name = "{sample}_align_filter_spikein",
        idx      = INDEX_PATH + INDEX_SPIKE + ".txt",
        samp     = "{sample}_" + INDEX_SPIKE,
        fa3      = FA_SPIKE,
        sortname = PROJ + "/{sample}_spikein.temp"
    resources:
        memory   = MEMORY * 3
    log:
        out = PROJ + "/logs/{sample}_align_filter_spikein.out",
        err = PROJ + "/logs/{sample}_align_filter_spikein.err"
    message:
        "filtering spike in reads {wildcards.sample}"
    threads: 
        12
    shell:
        """
        # filter
        samtools view {input.bam} $(head -n1 {params.idx}) \
        | sed 's/spike_*//g' | samtools view -bT {params.fa3} - \
        | samtools sort - -T {params.sortname} -@ {threads} -O bam \
        > {output.bam}
        
        samtools index -@ {threads} {output.bam}
        echo "{params.samp} Filtered_reads $(samtools idxstats {output.bam} | awk '{{s+=$3}} END {{print s}}')" > {output.counts}
        
        """

# calculating subsample numbers for group
rule calculating_subsample_group:
    input:
        lambda wildcards: expand(
            PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_count.txt",
            sample = GROUPS[wildcards.group]
        )
    output:
        PROJ + "/bams/{group}_" + INDEX_SAMPLE + "_subsample_frac.txt"
    params:
        job_name = "{group}_subsample",
        group   = "{group}"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/{group}_subsample.out",
        err = PROJ + "/logs/{group}_subsample.err"
    message:
        "getting subsample norm for {wildcards.group}"
    threads: 
        1
    script:
        '../R_scripts/count_subsample.R'


# Combine bamCoverage summaries
rule calculating_subsample_summary:
    input:
        sorted(expand(
            PROJ + "/bams/{group}_" + INDEX_SAMPLE + "_subsample_frac.txt",
            group = GRPS_UNIQ
        ))
    output:
        PROJ + "/stats/" + PROJ + "_" + INDEX_SAMPLE + "_subsample_frac.tsv"
    params:
        job_name = PROJ + "_calculating_subsample_summary"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_calculating_subsample_summary.out",
        err = PROJ + "/logs/" + PROJ + "_calculating_subsample_summary.err"
    message:
        "Creating " + PROJ + " subsample summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                for line in open(file, "r"):
                    out.write(line)



# output subsampled bamfile
rule subsample_dedup:
    input:
        bam    = PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam",
        bai    = PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam.bai",
        counts = PROJ + "/stats/" + PROJ + "_" + INDEX_SAMPLE + "_subsample_frac.tsv"
    output:
        bam   = PROJ + "/bams_sub/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam",
        bai   = PROJ + "/bams_sub/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam.bai",
        stats = PROJ + "/bams_sub/{sample}_" + INDEX_SAMPLE + "_subsample.txt"
    params:
        job_name = "subsample_{sample}",
        samp     = "{sample}_" + INDEX_SAMPLE,
        scale    = _get_norm_samp
    resources:
        memory   = MEMORY * 3
    log:
        out = PROJ + "/logs/subsample_{sample}_" + INDEX_SAMPLE + ".out",
        err = PROJ + "/logs/subsample_{sample}_" + INDEX_SAMPLE + ".err"
    message:
        "Subsampling reads for {wildcards.sample} INDEX_SAMPLE "
    threads:
        16
    shell:
        """
          # find the min read count, calcuate the fraction of the reads to keep, samtools subset 
          samtools view -@ {threads} -s {params.scale} -b {input.bam} > {output.bam}
          
          samtools index -@ {threads} {output.bam}
        
          echo "{params.samp} Sampled_reads $(samtools idxstats {output.bam} | awk '{{s+=$3}} END {{print s}}')" >> {output.stats}
        """

                    