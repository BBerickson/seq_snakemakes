# ====== Rules for getting overall results =================================

# get read counts from bams
rule featureCounts:
    input:
        bam   = PROJ + "/" + BAM_PATH + "/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam",
        bai   = PROJ + "/" + BAM_PATH + "/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam.bai"
    output:
        PROJ + "/counts/{sample}_" + INDEX_SAMPLE + "_featureCounts.tsv"
    params:
        job_name = "{sample}_bowtie_featureCounts",
        args     = CMD_PARAMS["featureCounts"],
        saf      = SAF
    resources:
        memory   = lambda wildcards, input: memory_estimator([input.bam, input.bam2], 0.5, 4)
    log:
        out = PROJ + "/logs/{sample}_featureCounts.out",
        err = PROJ + "/logs/{sample}_featureCounts.err"
    message:
        "featureCounts for {wildcards.sample}"
    threads:
        12
    shell:
        """
        featureCounts \
            {params.args} \
            -F SAF \
            -a '{params.saf}' \
            -o '{output}' \
            -T {threads} \
            {input.bam}
        
        """

# making count file
rule featurecount_summary:
    input:
        PROJ + "/counts/{sample}_" + INDEX_SAMPLE + "_featureCounts.tsv",
        PROJ + "/counts/{sample}_" + INDEX_SPIKE + "_featureCounts.tsv"
    output:
        PROJ  + "/counts/{sample}_count.txt"
    params:
        job_name = "{sample}_count_summary"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/{sample}_count_summary.out",
        err = PROJ + "/logs/{sample}_count_summary.err"
    threads: 
        1
    script:
        '../R_scripts/featurecount_summary.R'
  
# gathering results
rule gathering_results:
    input:
        PROJ + "/stats/" + PROJ + "_cutadapt.tsv",
        PROJ + "/stats/" + PROJ + "_aligned.tsv",
        PROJ + "/stats/" + PROJ + "_" + INDEX_MAP + "_UMI_dedup.tsv",
        expand( PROJ + "/counts/{sample}_count.txt",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_results.tsv"
    params:
        job_name  = "results",
        index_map = INDEX_MAP,
        project   = PROJ
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/results.out",
        err = PROJ + "/logs/results.err"
    message:
        "getting final results"
    threads: 
        1
    script:
        '../R_scripts/results_UMI.R'
  

rule create_plots:
    input:
        PROJ + "/stats/" + PROJ + "_results.tsv",
        expand( PROJ + "/counts/{sample}_count.txt",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/" + PROJ + "_" + INDEX_SAMPLE + "_qc_analysis.html"
    params:
        job_name   = PROJ + "_qc_plots"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_qc_plots.out",
        err = PROJ + "/logs/" + PROJ + "_qc_plots.err"
    message:
        "Creating qc plots for " + PROJ + " project"
    threads:
        1
    shell:
        """
        touch .here
        Rmd=src/Rmds/analysis.Rmd
        script=src/Rmds/knit_rmd.R
        samp=samples.yaml
        out="_qc_analysis"

        Rscript $script \
            -i $Rmd \
            -o $out \
            -p {PROJ} \
            -m {INDEX_MAP} \
            -x {INDEX_SAMPLE} \
            -s $samp 
        """

