# ===== Rules to count reads overlapping genes =================================


# Run featureCounts
rule featureCounts_sample:
    input:
        bam = PROJ + "/" + BAM_PATH + "/{sample}_aligned_{index}_" + SEQ_DATE + ".bam",
        bai = PROJ + "/" + BAM_PATH + "/{sample}_aligned_{index}_" + SEQ_DATE + ".bam.bai"
    output:
        tsv = PROJ + "/counts/{sample}_aligned_{index}_featureCounts.tsv"
    params:
        job_name = "{sample}_aligned_{index}_featureCounts",
        args     = lambda wildcards: _get_featCount(ORIENTATION, config_indexes[wildcards.index].get("GTF")),
        args2    = config["CMD_PARAMS"].get("featureCounts", ""),
        tsv      = PROJ + "/counts/{sample}_aligned_{index}_featureCounts_enrich.tsv",
        ftfile   = lambda wildcards: config_indexes[wildcards.index].get("GTF")
    resources:
        memory = lambda wildcards, input: memory_estimator(input, 0.5, 4)
    log:
        out = PROJ + "/logs/{sample}_featureCounts_{index}.out",
        err = PROJ + "/logs/{sample}_featureCounts_{index}.err"
    threads:
        12
    shell:
        """
        if [ "{params.args2}" != "" ]; then
            featureCounts \
              {params.args} \
              {params.args2} \
              -a {params.ftfile} \
              -o {params.tsv} \
              -T {threads} \
              {input.bam}
        fi
        
        featureCounts \
            {params.args} \
            -a {params.ftfile} \
            -o {output.tsv} \
            -T {threads} \
            {input.bam}
        """

# making count file with spikein
rule featurecount_summary:
    input:
        lambda wildcards: expand(
            PROJ + "/counts/{sample}_aligned_{index}_featureCounts.tsv",
            sample=wildcards.sample,
            index=INDEXES
        )
    output:
        summary = PROJ + "/stats/{sample}_summary_featureCounts.tsv"
    params:
        job_name = "{sample}_summary_featureCounts",
        index = INDEXES,
        script = "pipelines/R_scripts/featurecount_summary.R"
    resources:
        memory = lambda wildcards, input: memory_estimator(input, 1, 1)
    log:
        out = PROJ + "/logs/{sample}_summary_featureCounts.out",
        err = PROJ + "/logs/{sample}_summary_featureCounts.err"
    threads: 1
    shell:
        """
        Rscript {params.script} "{input}" "{params.index}" "{output.summary}"
        """

        
