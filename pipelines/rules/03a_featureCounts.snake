# ===== Rules to count reads overlapping genes =================================


rule featureCounts_sample:
    input:
        bam = PROJ + "/" + BAM_PATH + "/{sample}_aligned_{index}_" + SEQ_DATE + ".bam",
        bai = PROJ + "/" + BAM_PATH + "/{sample}_aligned_{index}_" + SEQ_DATE + ".bam.bai",
        counts = PROJ + "/bams/{sample}_aligned_{index}_count.txt"
    output:
        tsv = PROJ + "/counts/{sample}_aligned_{index}_featureCounts.tsv"
    params:
        job_name = "{sample}_aligned_{index}_featureCounts",
        args     = lambda wildcards: _get_featCount(ORIENTATION, config_indexes[wildcards.index].get("GTF")),
        args2    = config["CMD_PARAMS"].get("featureCounts", ""),
        tsv      = PROJ + "/counts/{sample}_aligned_{index}_featureCounts_enrich.tsv",
        ftfile   = lambda wildcards: config_indexes[wildcards.index].get("GTF")
    resources:
        memory = lambda wildcards, input: memory_estimator(input, 0.5, 4)
    log:
        out = PROJ + "/logs/{sample}_featureCounts_{index}.out",
        err = PROJ + "/logs/{sample}_featureCounts_{index}.err"
    threads:
        12
    shell:
        """
        # Extract read count from the counts file
        read_count=$(awk '{{print $3}}' {input.counts})
        
        # Check if BAM file is empty (0 reads)
        if [ "$read_count" -eq 0 ]; then
            echo "BAM file is empty (0 reads), creating empty featureCounts output"
            # Create empty featureCounts output file
            echo -e "# Program:featureCounts v2.0.1; Command line arguments: (empty BAM file)" > {output.tsv}
            echo -e "ID\tChr\tStart\tEnd\tStrand\tLength\tgene_name\tGeneid\t{input.bam}" >> {output.tsv}
            echo -e "0\tchr0\t1\t2\t+\t1\tgene_name\tGeneid\t0" >> {output.tsv}
            
            # Create dummy .summary file
            echo -e "Status\t{input.bam}" > {output.tsv}.summary
            echo -e "Assigned\t0" >> {output.tsv}.summary
            echo -e "Unassigned_Unmapped\t0" >> {output.tsv}.summary
            echo -e "Unassigned_MappingQuality\t0" >> {output.tsv}.summary
            echo -e "Unassigned_Chimera\t0" >> {output.tsv}.summary
            echo -e "Unassigned_FragmentLength\t0" >> {output.tsv}.summary
            echo -e "Unassigned_Duplicate\t0" >> {output.tsv}.summary
            echo -e "Unassigned_MultiMapping\t0" >> {output.tsv}.summary
            echo -e "Unassigned_Secondary\t0" >> {output.tsv}.summary
            echo -e "Unassigned_NonSplit\t0" >> {output.tsv}.summary
            echo -e "Unassigned_NoFeatures\t0" >> {output.tsv}.summary
            echo -e "Unassigned_Overlapping_Length\t0" >> {output.tsv}.summary
            echo -e "Unassigned_Ambiguity\t0" >> {output.tsv}.summary
        else
            echo "BAM file contains $read_count reads, running featureCounts"
            
            # Run featureCounts with additional parameters if specified
            if [ "{params.args2}" != "" ]; then
                featureCounts \
                  {params.args} \
                  {params.args2} \
                  -a {params.ftfile} \
                  -o {params.tsv} \
                  -T {threads} \
                  {input.bam}
            fi
            
            # Run main featureCounts
            featureCounts \
                {params.args} \
                -a {params.ftfile} \
                -o {output.tsv} \
                -T {threads} \
                {input.bam}
        fi
        """
        

# making count file with spikein
rule featurecount_summary:
    input:
        lambda wildcards: expand(
            PROJ + "/counts/{sample}_aligned_{index}_featureCounts.tsv",
            sample=wildcards.sample,
            index=INDEXES
        ),
    output:
        summary = PROJ + "/stats/{sample}_summary_featureCounts.tsv"
    params:
        job_name = "{sample}_summary_featureCounts",
        index = INDEXES,
        script = "pipelines/R_scripts/featurecount_summary.R"
    resources:
        memory = lambda wildcards, input: memory_estimator(input, 1, 1)
    log:
        out = PROJ + "/logs/{sample}_summary_featureCounts.out",
        err = PROJ + "/logs/{sample}_summary_featureCounts.err"
    threads: 1
    shell:
        """
        Rscript {params.script} "{input}" "{params.index}" "{output.summary}"
        """

# ref file alignment counts        
rule refCounts_sample:
    input:
        bam = PROJ + "/" + BAM_PATH + "/{sample}_aligned_{index}_" + SEQ_DATE + ".bam",
        bai = PROJ + "/" + BAM_PATH + "/{sample}_aligned_{index}_" + SEQ_DATE + ".bam.bai",
        summary = PROJ + "/stats/{sample}_summary_featureCounts.tsv"
    output:
        counts = PROJ + "/counts/{sample}_aligned_{index}_norm_{suffix}_refCounts.tsv"
    params:
        job_name = "{sample}_{index}_{suffix}_refCounts",
        bed = lambda wildcards: config["CMD_PARAMS"].get("refBed", ""),
        is_paired = lambda wildcards: PAIREDMAP[wildcards.sample]
    resources:
        memory = lambda wildcards, input: memory_estimator(input, 1, 4)
    log:
        out = PROJ + "/logs/{sample}_aligned_{index}_norm_{suffix}_refCounts.out",
        err = PROJ + "/logs/{sample}_aligned_{index}_norm_{suffix}_refCounts.err"
    threads: 1
    shell:
        """
        if [ -n "{params.bed}" ] && [ -f "{params.bed}" ]; then
            bed_name=$(basename {params.bed} .bed)
            bed_name_with_index="${{bed_name}}_{wildcards.index}"
            count=$(samtools view {input.bam} -L {params.bed} -c)
            
            # Divide by 2 if paired-end sequencing
            if [ "{params.is_paired}" = "True" ] || [ "{params.is_paired}" = "true" ]; then
                count=$((count / 2))
            fi
            
            # Write to output counts file
            echo -e "${{bed_name_with_index}} ${{count}}" > {output.counts}
            
            # Append the same info to the summary file
            echo -e "${{bed_name_with_index}} ${{count}}" >> {input.summary}
        else
            # If bed file is empty string or doesn't exist, just create empty output file
            touch {output.counts}
        fi
        """
        