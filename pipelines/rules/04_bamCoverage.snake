# ====== Rules for aligning reads with bamCoverage and OR norm to spike in =================================

# grab color from dict
def _get_col(wildcards):
    sample = wildcards.newnam
    if sample in COLS_DICT:
      results = (COLS_DICT[sample])
    else:
      results = "0,0,0"
    return(results)
        
# gets number for norm fraction
def _get_norm(wildcards):
    newnam = wildcards.newnam
    sample = SAMPLES[wildcards.newnam][0]
    patternfile = NORM
    num = 1
    if patternfile.lower() not in ["subsample", "none"] and not patternfile.isspace():
      patternfile = patternfile + "_" + INDEX_SAMPLE
      path = PROJ + "/counts/"
      filename = glob.glob(path + sample + "*_count.txt")[0]
      for line in open(filename, "r"):
        match = re.search(patternfile, line)
        if match:
          num = line.strip().split()
          if not float(num[1]) == 0:
            num = 1000000/float(num[1])
          else:
            num = 1
          break
        else:
          num = "fail"
    if isinstance(num, (int, float)):
      return num
    else:
      return patternfile

# Align trimmed reads with bamCoverage
rule bamCoverage:
    input:
        bam = lambda wildcards: expand(
            PROJ + "/" + BAM_PATH + "/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam",
            sample = SAMPLES[wildcards.newnam]
        ),
        check_point = PROJ + "/stats/" + PROJ + "_results.tsv"
    output:
        bigwig  = PROJ      + "/bw/{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORMS + ".bw",
        stats   = temp(PROJ      + "/bw/{newnam}_bamCoverage_stats.txt")
    params:
        job_name = "{newnam}_bamCoverage",
        args     = CMD_PARAMS["bamCoverage"] + CMD_PARAMS["bamCoverageBL"],
        scale    = _get_norm,
        color    = _get_col,
        url      = "http://amc-sandbox.ucdenver.edu/" + USER + "/" + SEQ_DATE + "_" + PROJ + "/{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORMS + ".bw"
    resources:
        memory   = MEMORY * 5
    log:
        out = PROJ + "/logs/{newnam}_bamCoverage.out",
        err = PROJ + "/logs/{newnam}_bamCoverage.err"
    message:
        "Aligning reads with bamCoverage for {wildcards.newnam}"
    threads: 
        12
    shell:
        """
        
        bamCoverage \
          -b {input.bam[0]} \
          -of bigwig \
          -o {output.bigwig} \
          {params.args} \
          --scaleFactor {params.scale} \
          -p {threads} 
        
        echo "track type=bigWig visibility=full name='{wildcards.newnam}_{SEQ_DATE}_{NORMS}' description='{wildcards.newnam}_{SEQ_DATE}_{NORMS}' color={params.color} bigDataUrl={params.url}" > {output.stats}
        ssh amc-sandbox 'mkdir -p ./public_html/{SEQ_DATE}_{PROJ}'
        scp {output.bigwig} amc-sandbox:./public_html/{SEQ_DATE}_{PROJ}
        
        """


# Combine bamCoverage summaries
rule bamCoverage_summary:
    input:
        sorted(expand(
            PROJ + "/bw/{newnam}_bamCoverage_stats.txt",
            newnam = NAMS_UNIQ
        ))
    output:
        PROJ + "/URLS/" + PROJ + "_" + INDEX_SAMPLE + "_" + NORMS + "_bw_URL.txt"
    params:
        job_name = PROJ + "_bamCoverage_summary"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_bamCoverage_summary.out",
        err = PROJ + "/logs/" + PROJ + "_bamCoverage_summary.err"
    message:
        "Creating " + PROJ + " bamCoverage summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                for line in open(file, "r"):
                    out.write(line)


# gets number for norm fraction
def _get_norm2(wildcards):
    newnam = wildcards.newnam
    sample = SAMPLES[wildcards.newnam][0]
    patternfile = NORM
    num = 1
    if patternfile.lower() not in ["subsample", "none"] and not patternfile.isspace():
      patternfile = patternfile + "_" + INDEX_SPIKE
      path = PROJ + "/counts/"
      filename = glob.glob(path + sample + "*_count.txt")[0]
      for line in open(filename, "r"):
        match = re.search(patternfile, line)
        if match:
          num = line.strip().split()
          if not float(num[1]) == 0:
            num = 1000000/float(num[1])
          else:
            num = 1
          break
        else:
          num = "fail"
    if isinstance(num, (int, float)):
      return num
    else:
      return patternfile

# Align trimmed reads with bamCoverage
rule bamCoverage_spike:
    input:
        bam = lambda wildcards: expand(
            PROJ + "/" + BAM_PATH + "/{sample}_" + INDEX_SPIKE + "_" + SEQ_DATE + ".bam",
            sample = SAMPLES[wildcards.newnam]
        ),
        check_point = PROJ + "/stats/" + PROJ + "_results.tsv"
    output:
        bigwig  = PROJ      + "/bw/{newnam}_" + INDEX_SPIKE + "_" + SEQ_DATE + "_" + NORMS + ".bw",
        stats   = temp(PROJ      + "/bw/{newnam}_spike_bamCoverage_stats.txt")
    params:
        job_name = "{newnam}_bamCoverage_spike",
        args     = CMD_PARAMS["bamCoverage"] + CMD_PARAMS["bamCoverageBL"],
        scale    = _get_norm2,
        color    = _get_col,
        url      = "http://amc-sandbox.ucdenver.edu/" + USER + "/" + SEQ_DATE + "_" + PROJ + "/{newnam}_" + INDEX_SPIKE + "_" + SEQ_DATE + "_" + NORMS + ".bw"
    resources:
        memory   = MEMORY * 5
    log:
        out = PROJ + "/logs/{newnam}_spike_bamCoverage.out",
        err = PROJ + "/logs/{newnam}_spike_bamCoverage.err"
    message:
        "Aligning reads with bamCoverage_spike for {wildcards.newnam}"
    threads: 
        12
    shell:
        """
        
        bamCoverage \
          -b {input.bam[0]} \
          -of bigwig \
          -o {output.bigwig} \
          {params.args} \
          --scaleFactor {params.scale} \
          -p {threads} 
        
        echo "track type=bigWig visibility=full name='{wildcards.newnam}_{SEQ_DATE}_{NORMS}' description='{wildcards.newnam}_{SEQ_DATE}_{NORMS}' color={params.color} bigDataUrl={params.url}" > {output.stats}
        ssh amc-sandbox 'mkdir -p ./public_html/{SEQ_DATE}_{PROJ}'
        scp {output.bigwig} amc-sandbox:./public_html/{SEQ_DATE}_{PROJ}
        
        """


# Combine bamCoverage summaries
rule bamCoverage_spike_summary:
    input:
        sorted(expand(
            PROJ + "/bw/{newnam}_spike_bamCoverage_stats.txt",
            newnam = NAMS_UNIQ
        ))
    output:
        PROJ + "/URLS/" + PROJ + "_" + INDEX_SPIKE + "_" + NORMS + "_bw_URL.txt"
    params:
        job_name = PROJ + "_bamCoverage_spike_summary"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_bamCoverage_spike_summary.out",
        err = PROJ + "/logs/" + PROJ + "_bamCoverage_spike_summary.err"
    message:
        "Creating " + PROJ + " bamCoverage_spike summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                for line in open(file, "r"):
                    out.write(line)

