# ====== Rules for makeing bigwig covarge files with bamCoverage =================================


# Align trimmed reads with bamCoverage
rule bamCoverage:
    input:
        bam = lambda wildcards: expand(
            PROJ + "/" + BAM_PATH + "/{sample}_aligned_{index}_" + SEQ_DATE + ".bam",
            sample = SAMPLES[wildcards.newnam],
            index = [wildcards.index]
        ),
        check_point = PROJ + "/report/" + PROJ + "_results.tsv",
        norm_files = lambda wildcards: [
            PROJ + "/stats/" + sample + "_summary_featureCounts.tsv" 
            for sample in SAMPLES[wildcards.newnam]
        ]
    output:
        fw      =   PROJ   + "/bw/{newnam}_aligned_{index}_" + SEQ_DATE + "_norm_{suffix}_fw.bw",
        rev     =   PROJ   + "/bw/{newnam}_aligned_{index}_" + SEQ_DATE + "_norm_{suffix}_rev.bw"
    params:
        job_name = "{newnam}_aligned_{index}_" + SEQ_DATE + "_{suffix}_bamCoverage",
        args     = CMD_PARAMS["bamCoverage"] + CMD_PARAMS.get("bamCoverageBL", ""),
        argsf    = _get_bamCov_strand("forward", ORIENTATION),
        argsr    = _get_bamCov_strand("reverse", ORIENTATION),
        sam_norm = SAM_NORM  # Pass the original data
    resources:
        memory   = lambda wildcards, input: memory_estimator(input.bam, 0.2, 5)
    log:
        out = PROJ + "/logs/{newnam}_aligned_{index}_" + SEQ_DATE + "_{suffix}_bamCoverage.out",
        err = PROJ + "/logs/{newnam}_aligned_{index}_" + SEQ_DATE + "_{suffix}_bamCoverage.err"
    threads: 
        12
    shell:
        """
        """
        SCALE=$(python -c "
import sys
import pandas as pd
sys.path.append('pipelines')
from funs import _get_norm

# Recreate the dataframe from the passed data
df_sam_norm = pd.DataFrame({params.sam_norm!r}, columns=['Sample', 'Newnam', 'Index', 'Norm', 'Suffix'])
scale = _get_norm(df_sam_norm, '{wildcards.newnam}', '{wildcards.suffix}', '{wildcards.index}', {input.norm_files!r})
print(scale)
")
        
        # Generate forward strand coverage
        bamCoverage \
          -b {input.bam[0]} \
          -of bigwig \
          -o {output.fw} \
          {params.args} \
          $SCALE \
          -p {threads} \
          --filterRNAstrand {params.argsf}
          
        # Generate reverse strand coverage  
        bamCoverage \
          -b {input.bam[0]} \
          -of bigwig \
          -o {output.rev} \
          {params.args} \
          $SCALE \
          -p {threads} \
          --filterRNAstrand {params.argsr}
        """

