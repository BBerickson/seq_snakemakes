# ====== Rules for making standard sense 3 matrix files =================================



# stranded sense matrix files
rule my_3_sense_matrix:
    input:
        fw  =   PROJ   + "/bw/{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORMS + "_fw.bw",
        rev =   PROJ   + "/bw/{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORMS + "_rev.bw"
    output:
        sense   = temp(PROJ   + "/matrix/{newnam}_temp0_3_matrix.gz"),
        sense1  = temp(PROJ   + "/matrix/{newnam}_temp1_3_matrix.gz"),
        sense2  = temp(PROJ   + "/matrix/{newnam}_temp2_3_matrix.gz")
    params:
        job_name = "{newnam}_sense_matrix",
        args     = CMD_PARAMS["reference3"]  + CMD_PARAMS["BL"],
        fw_ref   = FW_REF,
        rev_ref  = REV_REF
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 2, 5)
    log:
        out = PROJ + "/logs/{newnam}_sense_3_matrix.out",
        err = PROJ + "/logs/{newnam}_sense_3_matrix.err"
    message:
        "standard sense 3 matrix files {wildcards.newnam}"
    threads: 
        12
    shell:
        """
        # no unscaled body
        computeMatrix reference-point \
          {params.args} \
          -R {params.fw_ref} \
          -S {input.fw} \
          -p {threads} \
          -o {output.sense1}

        computeMatrix reference-point \
          {params.args} \
          -R {params.rev_ref} \
          -S {input.rev} \
          -p {threads} \
          -o {output.sense2}

        computeMatrixOperations rbind -m {output.sense1} {output.sense2} -o {output.sense}

        """

# stranded sense matrix files
rule fix_3_sense_matrix:
    input:
        PROJ   + "/matrix/{newnam}_temp0_3_matrix.gz"
    output:
        temp(PROJ   + "/matrix/{newnam}_temp0_fix_3_matrix.gz")
    params:
        job_name = "{newnam}_3_sense_matrix",
        args    = CMD_PARAMS["filter3"]
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/{newnam}_fix_3_sense_matrix.out",
        err = PROJ + "/logs/{newnam}_fix_3_sense_matrix.err"
    message:
        "fix standard sense 3 matrix files {wildcards.newnam}"
    threads: 
        1
    script:
        '../R_scripts/MatrixTrim.R'
        

# make url's and scp to sandbox
rule my_3_url:
    input:
        PROJ   + "/matrix/{newnam}_temp0_fix_3_matrix.gz"
    output:
        temp(PROJ + "/matrix/3.{newnam}_matrix.url.txt"),
        PROJ + "/matrix/3_{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORM3 + "_matrix.gz"
    params:
        job_name = PROJ + "_3_matrix_url",
        color    = _get_col,
        url_out  = "http://amc-sandbox.ucdenver.edu/" + USER + "/" + SEQ_DATE + "_" + PROJ + "/3_{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORM3 + "_matrix.gz"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/{newnam}_sense_3_matrix_url.out",
        err = PROJ + "/logs/{newnam}_sense_3_matrix_url.err"
    message:
        "Creating sense 3_matrix url for {wildcards.newnam}"
    threads:
        1
    shell:
        """
        # fix R appended file remote read error
        computeMatrixOperations relabel -m {input} -o {output[1]}
        echo {params.url_out} self 3.{wildcards.newnam}_{SEQ_DATE} {params.color} >> {output[0]}
        ssh amc-sandbox 'mkdir -p ./public_html/{SEQ_DATE}_{PROJ}'
        scp {output[1]} amc-sandbox:./public_html/{SEQ_DATE}_{PROJ}
        
        """
        
# Combine urls
rule my_3_url_summary:
    input:
        sorted(expand(
            PROJ + "/matrix/3.{newnam}_matrix.url.txt",
            newnam = NAMS_UNIQ
        ))
    output:
        PROJ + "/URLS/3_" + PROJ + "_" + INDEX_SAMPLE + NORM3 + "_sense_matrix.url.txt"
    params:
        job_name = PROJ + "_sense_3_matrix_url"
    resources:
        memory   = 1
    log:
        out = PROJ + "/logs/" + PROJ + "_sense_3_matrix_url.out",
        err = PROJ + "/logs/" + PROJ + "_sense_3_matrix_url.err"
    message:
        "Creating " + PROJ + " sense 3_matrix url"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                for line in open(file, "r"):
                    out.write(line)




