# ====== Rules for making standard 543 matrix files =================================

# matrix files
rule standared543_matrix:
    input:
        bw  =   PROJ + "/bw/{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORMS + ".bw"
    output:
        matrix = temp(PROJ + "/matrix/{newnam}_temp_" + NORM543[0] + NORM543[1] + "_543_matrix.gz")
    params:
        job_name = NORM543[0] + NORM543[1] + "_{newnam}_matrix",
        args     = CMD_PARAMS["region543"]  + CMD_PARAMS["bamCoverageBL"],
        my_ref   = MY_REF
    resources:
        memory   = lambda wildcards, input: memory_estimator(input, 2, 5)
    log:
        out = PROJ + "/logs/" + NORM543[0] + NORM543[1] + "_{newnam}_matrix.out",
        err = PROJ + "/logs/" + NORM543[0] + NORM543[1] + "_{newnam}_matrix.err"
    threads: 
        12
    shell:
        """
        # 
        computeMatrix scale-regions \
          {params.args} \
          -R {params.my_ref} \
          -S {input.bw} \
          -p {threads} \
          -o {output.matrix}

        """

# stranded sense matrix files
rule fix_543_matrix:
    input:
        PROJ + "/matrix/{newnam}_temp_" + NORM543[0] + NORM543[1] + "_543_matrix.gz"
    output:
        PROJ + "/matrix/" + NORM543[0] + "{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORM543[1] + "_matrix.gz"
    params:
        job_name = NORM543[0] + NORM543[1] + "_{newnam}_fix_matrix",
        args     = CMD_PARAMS["region543"] + " unstranded"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/" + NORM543[0] + NORM543[1] + "_{newnam}_fix_matrix.out",
        err = PROJ + "/logs/" + NORM543[0] + NORM543[1] + "_{newnam}_fix_matrix.err"
    threads: 
        1
    script:
        '../R_scripts/MatrixTrim.R'
        
# make url's and scp to sandbox
rule standared543_url:
    input:
        PROJ + "/matrix/" + NORM543[0] + "{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORM543[1] + "_matrix.gz"
    output:
        temp(PROJ + "/matrix/" + NORM543[0] + NORM543[1] + "_{newnam}_matrix.url.txt")
    params:
        job_name = PROJ + NORM543[0] + NORM543[1] + "_543_matrix_url",
        color    = _get_col,
        groupkey = lambda wildcards: next((k for k, v in GROUP2.items() if wildcards.newnam in v), "self"),
        url_out  = "http://amc-sandbox.ucdenver.edu/" + USER + "/" + SEQ_DATE + "_" + PROJ + "/" + NORM543[0] + "{newnam}_" + INDEX_SAMPLE + "_" + SEQ_DATE + NORM543[1] + "_matrix.gz"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/" + NORM543[0] + NORM543[1] + "_{newnam}_matrix_url.out",
        err = PROJ + "/logs/" + NORM543[0] + NORM543[1] + "_{newnam}_matrix_url.err"
    threads:
        1
    shell:
        """
        
        # fix R appended file remote read error
        computeMatrixOperations relabel -m {input} -o {input}
        echo {params.url_out} {params.groupkey} {wildcards.newnam}{NORMS}_{SEQ_DATE} {params.color} >> {output[0]}
        ssh amc-sandbox 'mkdir -p ./public_html/{SEQ_DATE}_{PROJ}'
        scp {input[0]} amc-sandbox:./public_html/{SEQ_DATE}_{PROJ}
        """
        
# Combine urls
rule sense_url_summary:
    input:
        sorted(expand(
            PROJ + "/matrix/" + NORM543[0] + NORM543[1] + "_{newnam}_matrix.url.txt",
            newnam = NAMS_UNIQ
        ))
    output:
        PROJ + "/URLS/" + NORM543[0] + PROJ + "_" + INDEX_SAMPLE + NORM543[1] + "_matrix.url.txt"
    params:
        job_name = PROJ + NORM543[0] + NORM543[1] + "_matrix_url"
    resources:
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + NORM543[0] + NORM543[1] + "_matrix_url.out",
        err = PROJ + "/logs/" + PROJ + NORM543[0] + NORM543[1] + "_matrix_url.err"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                for line in open(file, "r"):
                    out.write(line)




