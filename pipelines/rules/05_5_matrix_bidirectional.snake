# ====== Rules for making standard 5 matrix files from non-stranded ref =================================


# stranded sense matrix files
rule my_5_bidirectonal_matrix:
    input:
        fw  =   PROJ   + "/bw/{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORMS + "_fw.bw",
        rev =   PROJ   + "/bw/{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORMS + "_rev.bw"
    output:
        sense   = temp(PROJ   + "/matrix/{group}_temp0_5_matrix.gz"),
        asense  = temp(PROJ   + "/matrix/{group}_temp0_a5_matrix.gz")
    params:
        job_name = "{group}_bidirectonal_matrix",
        memory   = MEMORY * 5,
        args     = CMD_PARAMS["reference5"]  + CMD_PARAMS["BL"],
        argsa    = CMD_PARAMS["reference5a"]  + CMD_PARAMS["BL"],
        fw_ref   = FW_REF,
        rev_ref  = REV_REF
    log:
        out = PROJ + "/logs/{group}_bidirectonal_5_matrix.out",
        err = PROJ + "/logs/{group}_bidirectonal_5_matrix.err"
    message:
        "standard bidirectonal 5 matrix files {wildcards.group}"
    threads: 
        12
    shell:
        """
        # no unscaled body
        computeMatrix reference-point \
          {params.args} \
          -R {params.fw_ref} \
          -S {input.fw} \
          -p {threads} \
          -o {output.sense}
          
          computeMatrix reference-point \
          {params.argsa} \
          -R {params.rev_ref} \
          -S {input.rev} \
          -p {threads} \
          -o {output.asense}

        """

# stranded bidirectonal matrix files
rule fix_5_sense_matrix:
    input:
        PROJ   + "/matrix/{group}_temp0_5_matrix.gz"
    output:
        PROJ + "/matrix/5_{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORM5S + "_pos_matrix.gz"
    params:
        job_name = "{group}_5_sense_matrix",
        memory   = MEMORY * 5,
        args    = CMD_PARAMS["filter5"]
    log:
        out = PROJ + "/logs/{group}_fix_5_sense_matrix.out",
        err = PROJ + "/logs/{group}_fix_5_sense_matrix.err"
    message:
        "fix standard sense 5 matrix files {wildcards.group}"
    threads: 
        1
    script:
        '../R_scripts/MatrixTrim.R'
        
# stranded asense matrix files
rule fix_5_asense_matrix:
    input:
        PROJ   + "/matrix/{group}_temp0_a5_matrix.gz"
    output:
        PROJ + "/matrix/5_{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORM5A + "_neg_matrix.gz"
    params:
        job_name = "{group}_5_asense_matrix",
        memory   = MEMORY * 5,
        args    = CMD_PARAMS["filter5a"]
    log:
        out = PROJ + "/logs/{group}_fix_5_asense_matrix.out",
        err = PROJ + "/logs/{group}_fix_5_asense_matrix.err"
    message:
        "fix standard asense 5 matrix files {wildcards.group}"
    threads: 
        1
    script:
        '../R_scripts/MatrixTrim.R'
        
# make url's and scp to sandbox
rule my_5_url_s:
    input:
        matrix1 = PROJ + "/matrix/5_{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORM5S + "_pos_matrix.gz",
        matrix2 = PROJ + "/matrix/5_{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORM5A + "_neg_matrix.gz"
    output:
        temp(PROJ + "/matrix/5.{group}_matrixs.url.txt")
    params:
        job_name = PROJ + "_bidirectonal_5_matrix_url",
        memory   = 4,
        color    = _get_col,
        url_out  = "http://amc-sandbox.ucdenver.edu/" + USER + "/" + SEQ_DATE + "_" + PROJ + "/5_{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORM5S + "_pos_matrix.gz",
        url_anti = "http://amc-sandbox.ucdenver.edu/" + USER + "/" + SEQ_DATE + "_" + PROJ + "/5_{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORM5A + "_neg_matrix.gz",
        matrix1g = PROJ + "/matrix/5_{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORM5S + "_pos_matrix",
        matrix2g = PROJ + "/matrix/5_{group}_" + INDEX_SAMPLE + "_" + SEQ_DATE + "_" + NORM5A + "_neg_matrix"
    log:
        out = PROJ + "/logs/{group}_bidirectonal_5_matrix_url.out",
        err = PROJ + "/logs/{group}_bidirectonal_5_matrix_url.err"
    message:
        "Creating bidirectonal 5_matrix url for {wildcards.group}"
    threads:
        1
    shell:
        """
        # fix for strange side affect that only the 1 line loads from sandbox
        gunzip {input.matrix1}
        gzip {params.matrix1g}
        gunzip {input.matrix2}
        gzip {params.matrix2g}
        echo {params.url_out} 5 5.{wildcards.group}_{SEQ_DATE}_pos {params.color} >> {output[0]}
        echo {params.url_anti} 5 5.{wildcards.group}_{SEQ_DATE}_neg {params.color} >> {output[0]}
        ssh amc-sandbox 'mkdir -p ./public_html/{SEQ_DATE}_{PROJ}'
        scp {input.matrix1} amc-sandbox:./public_html/{SEQ_DATE}_{PROJ}
        scp {input.matrix2} amc-sandbox:./public_html/{SEQ_DATE}_{PROJ}
        
        """
        
# Combine urls
rule my_5_url_s_summary:
    input:
        sorted(expand(
            PROJ + "/matrix/5.{group}_matrixs.url.txt",
            group = GRPS_UNIQ
        ))
    output:
        PROJ + "/URLS/5_" + PROJ + "_" + INDEX_SAMPLE + "_" + NORM5S + "_bidirectonal_matrix.url.txt"
    params:
        job_name = PROJ + "_bidirectonal_5_matrix_url",
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_bidirectonal_5_matrix_url.out",
        err = PROJ + "/logs/" + PROJ + "_bidirectonal_5_matrix_url.err"
    message:
        "Creating " + PROJ + " bidirectonal 5_matrix url"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                for line in open(file, "r"):
                    out.write(line)




