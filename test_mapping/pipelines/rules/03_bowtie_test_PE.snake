# ====== Rules for aligning reads with bowtie2 =================================


# Align trimmed reads with bowtie2
rule bowtie:
    input:
        R1  = PROJ + "/bbduk/{sample}_R1_bbduk.fastq.gz",
        R2  = PROJ + "/bbduk/{sample}_R2_bbduk.fastq.gz"
    output:
        bam   = PROJ      + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam",
        bai   = PROJ      + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam.bai",
        stats = PROJ      + "/bams/{sample}_bowtie_stats.txt",
        reads = PROJ      + "/bams/{sample}_count.txt"
    params:
        job_name = "{sample}_bowtie",
        memory   = 64,
        idx      = INDEX_PATH + INDEX_SAMPLE,
        sortname = "{sample}.temp",
        args     = CMD_PARAMS["bowtie2"]
    log:
        out = PROJ + "/logs/{sample}_bowtie.out",
        err = PROJ + "/logs/{sample}_bowtie.err"
    message:
        "Aligning reads with Bowtie2 for {wildcards.sample}"
    threads: 
        12
    shell:
        """
        # By default bowtie2 performs end-to-end alignment
        # By default bowtie2 searches for multiple alignments and reports the best one
        bowtie2 \
            -p {threads} \
            -x {params.idx} \
            -1 {input.R1} \
            -2 {input.R2} \
            {params.args} \
            2> {output.stats} \
            | samtools view -bF4q5 - \
            | samtools sort - -T {params.sortname} -@ {threads} -O bam \
            > {output.bam}

        samtools index -@ {threads} {output.bam}
        
        echo "{INDEX_SAMPLE} $(samtools idxstats {output.bam} | awk '{{s+=$3}} END {{print s/2}}')" >> {output.reads}
        
        """

# Combine bowtie2 summaries
rule bowtie_summary:
    input:
        expand(
            PROJ + "/bams/{sample}_bowtie_stats.txt",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/stats/" + PROJ + "_aligned.tsv"
    params:
        job_name = PROJ + "_bowtie_summary",
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_bowtie_summary.out",
        err = PROJ + "/logs/" + PROJ + "_bowtie_summary.err"
    message:
        "Creating " + PROJ + " bowtie2 summary"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                name = os.path.basename(file)
                name = re.sub("_bowtie_stats.txt", "", name)

                for line in open(file, "r"):
                    match = re.search("overall alignment rate", line)

                    if match:
                        num = re.search("[0-9.%]+", line)
                        num = num.group(0)
                        met = re.search("[a-z\s]+", line).group(0)
                        met = met.strip()
                        met = re.sub(" ", "_", met)

                        out.write("%s\t%s\t%s\n" % (name, met, num))


# make URLS and copy files to sandbox
rule my_bowtie_sample_url:
    input:
        bam   = PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam",
        bai   = PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam.bai",
    output:
        temp(PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_url.txt")
    params:
        job_name = PROJ + "_bowtie_sample_url",
        memory   = 4,
        url      = "http://amc-sandbox.ucdenver.edu/" + USER + "/" + PROJ + "/{sample}_" + INDEX_SAMPLE + "_" + SEQ_DATE + ".bam"
    log:
        out = PROJ + "/logs/{sample}_" + PROJ + "_bowtie_sample_url.out",
        err = PROJ + "/logs/{sample}_" + PROJ + "_bowtie_sample_url.err"
    message:
        "Creating " + PROJ + " bowtie_sample url"
    threads:
        1
    shell:
        """
          echo "{params.url}" >> {output}
          ssh amc-sandbox 'mkdir -p ./public_html/{PROJ}'
          scp {input.bam}* amc-sandbox:./public_html/{PROJ}
          
        """
        
# Combine bowtie2 urls
rule bowtie_sample_urls:
    input:
        expand(
            PROJ + "/bams/{sample}_" + INDEX_SAMPLE + "_url.txt",
            sample = SAMS_UNIQ
        )
    output:
        PROJ + "/URLS/" + PROJ + "_" + INDEX_SAMPLE + "_bam_URL.txt"
    params:
        job_name = PROJ + "_bowtie_url",
        memory   = 4
    log:
        out = PROJ + "/logs/" + PROJ + "_bowtie_sample_url.out",
        err = PROJ + "/logs/" + PROJ + "_bowtie_sample_url.err"
    message:
        "Creating " + PROJ + " bowtie2 url"
    threads:
        1
    run:
        with open(output[0], "w") as out:
            for file in input:
                for line in open(file, "r"):
                    out.write(line)
                    
                    